{
    "$graph": [
        {
            "class": "Workflow",
            "id": "#lists_to_reads_records.cwl",
            "doc": "Convert three reads list inputs into reads records.\n\nThe three sets of reads lists are:\n- input_aligned_reads\n- input_se_reads and input_se_rg_strs\n- input_pe_reads, input_pe_mates, and input_se_rg_strs\n\nThis workflow will bind those elements together into reads records.\nThe reads records contain the following information:\n- reads1\n- reads2\n- outSAMattrRGline\n- cram_reference\n- r1_adapter\n- r2_adapter\n- min_len\n- quality_base\n- quality_cutoff\n",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "type": "record",
                            "name": "#reads_record_type.yml/reads_record",
                            "fields": [
                                {
                                    "type": [
                                        "null",
                                        "File"
                                    ],
                                    "secondaryFiles": [
                                        {
                                            "pattern": ".fai",
                                            "required": true
                                        }
                                    ],
                                    "doc": "If reads1 is a CRAM, provide the FASTA, and FAI index, used to create it",
                                    "name": "#reads_record_type.yml/reads_record/cram_reference"
                                },
                                {
                                    "type": [
                                        "null",
                                        "boolean"
                                    ],
                                    "doc": "Are the reads of this record paried-end?",
                                    "name": "#reads_record_type.yml/reads_record/is_paired_end"
                                },
                                {
                                    "type": [
                                        "null",
                                        "int"
                                    ],
                                    "doc": "After trimming, discard all reads with length less than this value",
                                    "name": "#reads_record_type.yml/reads_record/min_len"
                                },
                                {
                                    "type": [
                                        "null",
                                        "string"
                                    ],
                                    "doc": "STAR-formatted read group information. Suggested setting format is:\nID:sample_name LB:aliquot_id PL:platform SM:BSID for example ID:7316-242\nLB:750189 PL:ILLUMINA SM:BS_W72364MN. STAR will automatically convert unquoted\nspaces into tabs. If you wish to have a value with whitespace, the VALUE\nmust be enclosed in double quotes. Refer to the start documentation for\ncomplete input details. If not provided, value will be autogenerated based on\nthe reads1 file basename.\n",
                                    "name": "#reads_record_type.yml/reads_record/outSAMattrRGline"
                                },
                                {
                                    "type": [
                                        "null",
                                        "int"
                                    ],
                                    "doc": "Phred scale used for quality scores of the reads in this record",
                                    "name": "#reads_record_type.yml/reads_record/quality_base"
                                },
                                {
                                    "type": [
                                        "null",
                                        {
                                            "type": "array",
                                            "items": "int"
                                        }
                                    ],
                                    "doc": "Quality trim cutoff, see https://cutadapt.readthedocs.io/en/v3.4/guide.html#quality-trimming for how 5' 3' is handled",
                                    "name": "#reads_record_type.yml/reads_record/quality_cutoff"
                                },
                                {
                                    "type": [
                                        "null",
                                        "string"
                                    ],
                                    "doc": "Adapter present in the reads1 file",
                                    "name": "#reads_record_type.yml/reads_record/r1_adapter"
                                },
                                {
                                    "type": [
                                        "null",
                                        "string"
                                    ],
                                    "doc": "Adapter present in the reads2 file",
                                    "name": "#reads_record_type.yml/reads_record/r2_adapter"
                                },
                                {
                                    "type": "File",
                                    "secondaryFiles": [
                                        {
                                            "pattern": "^.bai",
                                            "required": false
                                        },
                                        {
                                            "pattern": ".bai",
                                            "required": false
                                        },
                                        {
                                            "pattern": "^.crai",
                                            "required": false
                                        },
                                        {
                                            "pattern": ".crai",
                                            "required": false
                                        }
                                    ],
                                    "doc": "One of the following: single end FASTQ, unaligned or unaligned alignment file with single or paired reads, or the R1 reads of a Paired-End FASTQ pair",
                                    "name": "#reads_record_type.yml/reads_record/reads1"
                                },
                                {
                                    "type": [
                                        "null",
                                        "File"
                                    ],
                                    "doc": "The R2 reads of a Paired-End FASTQ pair",
                                    "name": "#reads_record_type.yml/reads_record/reads2"
                                }
                            ]
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        }
                    ],
                    "doc": "If any input alignment files are CRAM, provide the reference used to create them",
                    "id": "#lists_to_reads_records.cwl/cram_reference"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": false
                        },
                        {
                            "pattern": ".bai",
                            "required": false
                        },
                        {
                            "pattern": "^.crai",
                            "required": false
                        },
                        {
                            "pattern": ".crai",
                            "required": false
                        }
                    ],
                    "id": "#lists_to_reads_records.cwl/input_alignment_files"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "id": "#lists_to_reads_records.cwl/input_pe_mates"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "id": "#lists_to_reads_records.cwl/input_pe_reads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#lists_to_reads_records.cwl/input_pe_rg_strs"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "id": "#lists_to_reads_records.cwl/input_se_reads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "id": "#lists_to_reads_records.cwl/input_se_rg_strs"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Are the alignment files provided paried end?",
                    "id": "#lists_to_reads_records.cwl/is_paired_end"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "If trimming adapters, what is the minimum length reads should have post trimming",
                    "id": "#lists_to_reads_records.cwl/min_len"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Phred scale used for quality scores of the reads",
                    "id": "#lists_to_reads_records.cwl/quality_base"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "doc": "Quality trim cutoff, see https://cutadapt.readthedocs.io/en/v3.4/guide.html#quality-trimming for how 5' 3' is handled",
                    "id": "#lists_to_reads_records.cwl/quality_cutoff"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "!Warning this will be applied to all R1 reads (PE, SE, and reads from alignment files)! If you have multiple adapters, manually trim your reads before input. If they share the same adapter, supply adapter here",
                    "id": "#lists_to_reads_records.cwl/r1_adapter"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "!Warning this will be applied to all R2 reads (PE and reads from alignment files)! If you have multiple adapters, manually trim your reads before input. If they share the same adapter, supply adapter here",
                    "id": "#lists_to_reads_records.cwl/r2_adapter"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "#reads_record_type.yml/reads_record"
                        }
                    ],
                    "outputSource": "#lists_to_reads_records.cwl/create_reads_records_am/out_rr",
                    "doc": "Reads records made from Aligned Reads input lists",
                    "id": "#lists_to_reads_records.cwl/am_reads_records"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "#reads_record_type.yml/reads_record"
                        }
                    ],
                    "outputSource": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/out_rr",
                    "doc": "Reads records made from Aligned Reads input lists",
                    "id": "#lists_to_reads_records.cwl/pe_fq_reads_records"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "#reads_record_type.yml/reads_record"
                        }
                    ],
                    "outputSource": "#lists_to_reads_records.cwl/create_reads_records_se_fq/out_rr",
                    "doc": "Reads records made from Aligned Reads input lists",
                    "id": "#lists_to_reads_records.cwl/se_fq_reads_records"
                }
            ],
            "steps": [
                {
                    "run": {
                        "class": "CommandLineTool",
                        "cwlVersion": "v1.2",
                        "baseCommand": [
                            "echo",
                            "done"
                        ],
                        "inputs": [
                            {
                                "type": {
                                    "type": "array",
                                    "items": [
                                        "null",
                                        "string"
                                    ]
                                },
                                "id": "#lists_to_reads_records.cwl/create_pe_reads_null_array/run/in_filelist"
                            }
                        ],
                        "outputs": [
                            {
                                "type": {
                                    "type": "array",
                                    "items": [
                                        "null",
                                        "string"
                                    ]
                                },
                                "outputBinding": {
                                    "outputEval": "$(inputs.in_filelist)"
                                },
                                "id": "#lists_to_reads_records.cwl/create_pe_reads_null_array/run/out_filelist"
                            }
                        ]
                    },
                    "in": [
                        {
                            "source": [
                                "#lists_to_reads_records.cwl/input_pe_rg_strs",
                                "#lists_to_reads_records.cwl/input_pe_reads"
                            ],
                            "valueFrom": "$(self[0] != null ? self[0] : self[1] != null ? self[1].map(function(e) { return null }) : [])\n",
                            "id": "#lists_to_reads_records.cwl/create_pe_reads_null_array/in_filelist"
                        }
                    ],
                    "out": [
                        "#lists_to_reads_records.cwl/create_pe_reads_null_array/out_filelist"
                    ],
                    "id": "#lists_to_reads_records.cwl/create_pe_reads_null_array"
                },
                {
                    "run": "#build_reads_record.cwl",
                    "scatter": [
                        "#lists_to_reads_records.cwl/create_reads_records_am/reads1"
                    ],
                    "in": [
                        {
                            "source": "#lists_to_reads_records.cwl/cram_reference",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/cram_reference"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/is_paired_end",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/is_paired_end"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/min_len",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/min_len"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/quality_base",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/quality_base"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/quality_cutoff",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/quality_cutoff"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/r1_adapter",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/r1_adapter"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/r2_adapter",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/r2_adapter"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/input_alignment_files",
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_am/reads1"
                        }
                    ],
                    "out": [
                        "#lists_to_reads_records.cwl/create_reads_records_am/out_rr"
                    ],
                    "id": "#lists_to_reads_records.cwl/create_reads_records_am"
                },
                {
                    "run": "#build_reads_record.cwl",
                    "scatter": [
                        "#lists_to_reads_records.cwl/create_reads_records_pe_fq/reads1",
                        "#lists_to_reads_records.cwl/create_reads_records_pe_fq/reads2",
                        "#lists_to_reads_records.cwl/create_reads_records_pe_fq/outSAMattrRGline"
                    ],
                    "scatterMethod": "dotproduct",
                    "in": [
                        {
                            "source": "#lists_to_reads_records.cwl/min_len",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/min_len"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/create_pe_reads_null_array/out_filelist",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/outSAMattrRGline"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/quality_base",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/quality_base"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/quality_cutoff",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/quality_cutoff"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/r1_adapter",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/r1_adapter"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/r2_adapter",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/r2_adapter"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/input_pe_reads",
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/reads1"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/input_pe_mates",
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq/reads2"
                        }
                    ],
                    "out": [
                        "#lists_to_reads_records.cwl/create_reads_records_pe_fq/out_rr"
                    ],
                    "id": "#lists_to_reads_records.cwl/create_reads_records_pe_fq"
                },
                {
                    "run": "#build_reads_record.cwl",
                    "scatter": [
                        "#lists_to_reads_records.cwl/create_reads_records_se_fq/reads1",
                        "#lists_to_reads_records.cwl/create_reads_records_se_fq/outSAMattrRGline"
                    ],
                    "scatterMethod": "dotproduct",
                    "in": [
                        {
                            "source": "#lists_to_reads_records.cwl/min_len",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq/min_len"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/create_se_reads_null_array/out_filelist",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq/outSAMattrRGline"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/quality_base",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq/quality_base"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/quality_cutoff",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq/quality_cutoff"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/r1_adapter",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq/r1_adapter"
                        },
                        {
                            "source": "#lists_to_reads_records.cwl/input_se_reads",
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq/reads1"
                        }
                    ],
                    "out": [
                        "#lists_to_reads_records.cwl/create_reads_records_se_fq/out_rr"
                    ],
                    "id": "#lists_to_reads_records.cwl/create_reads_records_se_fq"
                },
                {
                    "run": {
                        "class": "CommandLineTool",
                        "cwlVersion": "v1.2",
                        "baseCommand": [
                            "echo",
                            "done"
                        ],
                        "inputs": [
                            {
                                "type": {
                                    "type": "array",
                                    "items": [
                                        "null",
                                        "string"
                                    ]
                                },
                                "id": "#lists_to_reads_records.cwl/create_se_reads_null_array/run/in_filelist"
                            }
                        ],
                        "outputs": [
                            {
                                "type": {
                                    "type": "array",
                                    "items": [
                                        "null",
                                        "string"
                                    ]
                                },
                                "outputBinding": {
                                    "outputEval": "$(inputs.in_filelist)"
                                },
                                "id": "#lists_to_reads_records.cwl/create_se_reads_null_array/run/out_filelist"
                            }
                        ]
                    },
                    "in": [
                        {
                            "source": [
                                "#lists_to_reads_records.cwl/input_se_rg_strs",
                                "#lists_to_reads_records.cwl/input_se_reads"
                            ],
                            "valueFrom": "$(self[0] != null ? self[0] : self[1] != null ? self[1].map(function(e) { return null }) : [])\n",
                            "id": "#lists_to_reads_records.cwl/create_se_reads_null_array/in_filelist"
                        }
                    ],
                    "out": [
                        "#lists_to_reads_records.cwl/create_se_reads_null_array/out_filelist"
                    ],
                    "id": "#lists_to_reads_records.cwl/create_se_reads_null_array"
                }
            ],
            "hints": [
                {
                    "class": "https://sevenbridges.commaxNumberOfParallelInstances",
                    "value": 2
                }
            ],
            "$namespaces": {
                "sbg": "https://sevenbridges.com"
            }
        },
        {
            "class": "Workflow",
            "id": "#prepare_aligned_reads.cwl",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#reads_record_type.yml/reads_record"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#prepare_aligned_reads.cwl/output_basename"
                },
                {
                    "type": "#reads_record_type.yml/reads_record",
                    "id": "#prepare_aligned_reads.cwl/reads_record"
                },
                {
                    "type": "string",
                    "id": "#prepare_aligned_reads.cwl/sample_name"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#prepare_aligned_reads.cwl/samtools_fastq_cores"
                }
            ],
            "outputs": [
                {
                    "type": "boolean",
                    "outputSource": "#prepare_aligned_reads.cwl/alignmentfile_pairedness/is_paired_end",
                    "id": "#prepare_aligned_reads.cwl/is_paired_end"
                },
                {
                    "type": "File",
                    "outputSource": "#prepare_aligned_reads.cwl/align2fastq/fq1",
                    "id": "#prepare_aligned_reads.cwl/reads1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#prepare_aligned_reads.cwl/align2fastq/fq2",
                    "id": "#prepare_aligned_reads.cwl/reads2"
                },
                {
                    "type": "string",
                    "outputSource": "#prepare_aligned_reads.cwl/create_star_rg_line/rg_str",
                    "id": "#prepare_aligned_reads.cwl/rg_string"
                }
            ],
            "steps": [
                {
                    "run": "#samtools_fastq.cwl",
                    "in": [
                        {
                            "source": "#prepare_aligned_reads.cwl/output_basename",
                            "id": "#prepare_aligned_reads.cwl/align2fastq/SampleID"
                        },
                        {
                            "source": "#prepare_aligned_reads.cwl/samtools_fastq_cores",
                            "id": "#prepare_aligned_reads.cwl/align2fastq/cores"
                        },
                        {
                            "source": "#prepare_aligned_reads.cwl/reads_record",
                            "valueFrom": "$(self.cram_reference)",
                            "id": "#prepare_aligned_reads.cwl/align2fastq/cram_reference"
                        },
                        {
                            "source": "#prepare_aligned_reads.cwl/reads_record",
                            "valueFrom": "$(self.reads1)",
                            "id": "#prepare_aligned_reads.cwl/align2fastq/input_reads_1"
                        },
                        {
                            "source": [
                                "#prepare_aligned_reads.cwl/reads_record",
                                "#prepare_aligned_reads.cwl/alignmentfile_pairedness/is_paired_end"
                            ],
                            "valueFrom": "$(self[0].is_paired_end != null ? self[0].is_paired_end : self[1])\n",
                            "id": "#prepare_aligned_reads.cwl/align2fastq/is_paired_end"
                        }
                    ],
                    "out": [
                        "#prepare_aligned_reads.cwl/align2fastq/fq1",
                        "#prepare_aligned_reads.cwl/align2fastq/fq2"
                    ],
                    "id": "#prepare_aligned_reads.cwl/align2fastq"
                },
                {
                    "run": "#alignmentfile_pairedness.cwl",
                    "in": [
                        {
                            "source": "#prepare_aligned_reads.cwl/reads_record",
                            "valueFrom": "$(self.reads1)",
                            "id": "#prepare_aligned_reads.cwl/alignmentfile_pairedness/input_reads"
                        },
                        {
                            "source": "#prepare_aligned_reads.cwl/reads_record",
                            "valueFrom": "$(self.cram_reference)",
                            "id": "#prepare_aligned_reads.cwl/alignmentfile_pairedness/input_reference"
                        }
                    ],
                    "out": [
                        "#prepare_aligned_reads.cwl/alignmentfile_pairedness/is_paired_end"
                    ],
                    "id": "#prepare_aligned_reads.cwl/alignmentfile_pairedness"
                },
                {
                    "run": {
                        "cwlVersion": "v1.2",
                        "class": "CommandLineTool",
                        "requirements": [
                            {
                                "class": "InlineJavascriptRequirement"
                            }
                        ],
                        "baseCommand": [
                            "echo",
                            "done"
                        ],
                        "inputs": [
                            {
                                "type": "File",
                                "inputBinding": {
                                    "loadContents": true
                                },
                                "id": "#prepare_aligned_reads.cwl/create_star_rg_line/run/rg"
                            },
                            {
                                "type": "string",
                                "id": "#prepare_aligned_reads.cwl/create_star_rg_line/run/sample"
                            }
                        ],
                        "outputs": [
                            {
                                "type": "string",
                                "outputBinding": {
                                    "outputEval": "${\n  var rgline = inputs.rg.contents.trim().split('\\n')[0];\n  var fix_sample_rgline = rgline.replace(/\\tSM:.+?\\t/, \"\\tSM:\" + inputs.sample + \"\\t\");\n  var star_rgline = fix_sample_rgline.replace(/^@RG\\t/, \"\");\n  return star_rgline;\n}"
                                },
                                "id": "#prepare_aligned_reads.cwl/create_star_rg_line/run/rg_str"
                            }
                        ]
                    },
                    "in": [
                        {
                            "source": "#prepare_aligned_reads.cwl/samtools_head_rg/header_file",
                            "id": "#prepare_aligned_reads.cwl/create_star_rg_line/rg"
                        },
                        {
                            "source": "#prepare_aligned_reads.cwl/sample_name",
                            "id": "#prepare_aligned_reads.cwl/create_star_rg_line/sample"
                        }
                    ],
                    "out": [
                        "#prepare_aligned_reads.cwl/create_star_rg_line/rg_str"
                    ],
                    "id": "#prepare_aligned_reads.cwl/create_star_rg_line"
                },
                {
                    "run": "#samtools_head.cwl",
                    "in": [
                        {
                            "source": "#prepare_aligned_reads.cwl/reads_record",
                            "valueFrom": "$(self.reads1)",
                            "id": "#prepare_aligned_reads.cwl/samtools_head_rg/input_bam"
                        },
                        {
                            "valueFrom": "^@RG",
                            "id": "#prepare_aligned_reads.cwl/samtools_head_rg/line_filter"
                        }
                    ],
                    "out": [
                        "#prepare_aligned_reads.cwl/samtools_head_rg/header_file"
                    ],
                    "id": "#prepare_aligned_reads.cwl/samtools_head_rg"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#preprocess_reads.cwl",
            "doc": "Preprocess RNAseq reads\nPick basename\nCheck for pairedness\nConvert to FASTQ\nCutadapt\n",
            "requirements": [
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#reads_record_type.yml/reads_record"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "String to use as basename for outputs. Will use read1 file basename if null",
                    "id": "#preprocess_reads.cwl/output_basename"
                },
                {
                    "type": "#reads_record_type.yml/reads_record",
                    "id": "#preprocess_reads.cwl/reads_record"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "Sample ID of the input reads. If not provided, will use reads1 file basename.",
                    "id": "#preprocess_reads.cwl/sample_name"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num cores for align2fastq conversion, if input is an alignment file",
                    "default": 16,
                    "id": "#preprocess_reads.cwl/samtools_fastq_cores"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#preprocess_reads.cwl/cutadapt_3-4/cutadapt_stats",
                    "doc": "Cutadapt stats output, only if adapter is supplied.",
                    "id": "#preprocess_reads.cwl/cutadapt_stats"
                },
                {
                    "type": "#reads_record_type.yml/reads_record",
                    "outputSource": "#preprocess_reads.cwl/build_out_record/out_rr",
                    "id": "#preprocess_reads.cwl/processed_reads_record"
                }
            ],
            "steps": [
                {
                    "run": "#clt_basename_picker.cwl",
                    "in": [
                        {
                            "source": "#preprocess_reads.cwl/reads_record",
                            "valueFrom": "$(self.reads1.basename.split('.')[0])",
                            "id": "#preprocess_reads.cwl/basename_picker/root_name"
                        },
                        {
                            "source": "#preprocess_reads.cwl/sample_name",
                            "id": "#preprocess_reads.cwl/basename_picker/sample_name"
                        },
                        {
                            "source": "#preprocess_reads.cwl/reads_record",
                            "valueFrom": "$(self.outSAMattrRGline)",
                            "id": "#preprocess_reads.cwl/basename_picker/star_rg_line"
                        }
                    ],
                    "out": [
                        "#preprocess_reads.cwl/basename_picker/outname",
                        "#preprocess_reads.cwl/basename_picker/outsample",
                        "#preprocess_reads.cwl/basename_picker/outrg"
                    ],
                    "id": "#preprocess_reads.cwl/basename_picker"
                },
                {
                    "run": "#build_reads_record.cwl",
                    "in": [
                        {
                            "source": [
                                "#preprocess_reads.cwl/reads_record",
                                "#preprocess_reads.cwl/prepare_aligned_reads/is_paired_end"
                            ],
                            "valueFrom": "$(self[0].reads2 != null ? true : self[0].is_paired_end != null ? self[0].is_paired_end : self[1] != null ? self[1] : false)\n",
                            "id": "#preprocess_reads.cwl/build_out_record/is_paired_end"
                        },
                        {
                            "source": [
                                "#preprocess_reads.cwl/prepare_aligned_reads/rg_string",
                                "#preprocess_reads.cwl/basename_picker/outrg"
                            ],
                            "pickValue": "first_non_null",
                            "id": "#preprocess_reads.cwl/build_out_record/outSAMattrRGline"
                        },
                        {
                            "source": [
                                "#preprocess_reads.cwl/cutadapt_3-4/trimmedReadsR1",
                                "#preprocess_reads.cwl/prepare_aligned_reads/reads1",
                                "#preprocess_reads.cwl/reads_record"
                            ],
                            "valueFrom": "$(self[0] != null ? self[0] : self[1] != null ? self[1] : self[2].reads1)\n",
                            "id": "#preprocess_reads.cwl/build_out_record/reads1"
                        },
                        {
                            "source": [
                                "#preprocess_reads.cwl/cutadapt_3-4/trimmedReadsR2",
                                "#preprocess_reads.cwl/prepare_aligned_reads/reads2",
                                "#preprocess_reads.cwl/reads_record"
                            ],
                            "valueFrom": "$(self[0] != null ? self[0] : self[1] != null ? self[1] : self[2].reads2)\n",
                            "id": "#preprocess_reads.cwl/build_out_record/reads2"
                        }
                    ],
                    "out": [
                        "#preprocess_reads.cwl/build_out_record/out_rr"
                    ],
                    "id": "#preprocess_reads.cwl/build_out_record"
                },
                {
                    "run": "#cutadapter_3.4.cwl",
                    "when": "$(inputs.reads_record.r1_adapter != null)",
                    "in": [
                        {
                            "valueFrom": "$(inputs.reads_record.min_len)",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/min_len"
                        },
                        {
                            "valueFrom": "$(inputs.reads_record.quality_base)",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/quality_base"
                        },
                        {
                            "valueFrom": "$(inputs.reads_record.quality_cutoff)",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/quality_cutoff"
                        },
                        {
                            "valueFrom": "$(inputs.reads_record.r1_adapter)",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/r1_adapter"
                        },
                        {
                            "valueFrom": "$(inputs.reads_record.r2_adapter)",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/r2_adapter"
                        },
                        {
                            "source": "#preprocess_reads.cwl/prepare_aligned_reads/reads1",
                            "valueFrom": "$(self != null ? self : inputs.reads_record.reads1)\n",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/readFilesIn1"
                        },
                        {
                            "source": "#preprocess_reads.cwl/prepare_aligned_reads/reads2",
                            "valueFrom": "$(self != null ? self : inputs.reads_record.reads2)\n",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/readFilesIn2"
                        },
                        {
                            "source": "#preprocess_reads.cwl/reads_record",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/reads_record"
                        },
                        {
                            "source": [
                                "#preprocess_reads.cwl/output_basename",
                                "#preprocess_reads.cwl/basename_picker/outname"
                            ],
                            "valueFrom": "$(self.filter(function(e) { return e != null }).join('.'))\n",
                            "id": "#preprocess_reads.cwl/cutadapt_3-4/sample_name"
                        }
                    ],
                    "out": [
                        "#preprocess_reads.cwl/cutadapt_3-4/trimmedReadsR1",
                        "#preprocess_reads.cwl/cutadapt_3-4/trimmedReadsR2",
                        "#preprocess_reads.cwl/cutadapt_3-4/cutadapt_stats"
                    ],
                    "id": "#preprocess_reads.cwl/cutadapt_3-4"
                },
                {
                    "run": "#prepare_aligned_reads.cwl",
                    "when": "$(inputs.reads_record.reads1.basename.search(/.(b|cr|s)am$/) != -1)",
                    "in": [
                        {
                            "source": "#preprocess_reads.cwl/basename_picker/outname",
                            "id": "#preprocess_reads.cwl/prepare_aligned_reads/output_basename"
                        },
                        {
                            "source": "#preprocess_reads.cwl/reads_record",
                            "id": "#preprocess_reads.cwl/prepare_aligned_reads/reads_record"
                        },
                        {
                            "source": "#preprocess_reads.cwl/basename_picker/outsample",
                            "id": "#preprocess_reads.cwl/prepare_aligned_reads/sample_name"
                        },
                        {
                            "source": "#preprocess_reads.cwl/samtools_fastq_cores",
                            "id": "#preprocess_reads.cwl/prepare_aligned_reads/samtools_fastq_cores"
                        }
                    ],
                    "out": [
                        "#preprocess_reads.cwl/prepare_aligned_reads/reads1",
                        "#preprocess_reads.cwl/prepare_aligned_reads/reads2",
                        "#preprocess_reads.cwl/prepare_aligned_reads/is_paired_end",
                        "#preprocess_reads.cwl/prepare_aligned_reads/rg_string"
                    ],
                    "id": "#preprocess_reads.cwl/prepare_aligned_reads"
                }
            ],
            "hints": [
                {
                    "class": "https://sevenbridges.commaxNumberOfParallelInstances",
                    "value": 2
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#alignmentfile_pairedness.cwl",
            "doc": "Determines whether a given BAM/SAM is paired or single end.",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement",
                    "expressionLib": [
                        "/**\n* Given the contents of a file and a string keyword. Return the post-colon value on the line containing the keyWord\n* For instance if the line contents were KeyWord:Value, the function will return Value.\n*\n* @param {String} fileContents - The contents of the file\n* @param {String} keyWord - The exact keyWord for which we will be checking\n* @return {String, null} the string after the keyWord and colon; null if no keyWord found\n*/\nfunction returnKeyValue (fileContents, keyWord) {\n  var rows = fileContents.split(/\\r?\\n/);\n  for (var row in rows) {\n    if (rows[row].search(keyWord) == 0) {\n      return rows[row].split(':')[1];\n    }\n  }\n  return null;\n}\n"
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.cpu)",
                    "ramMin": "$(inputs.ram * 1000)"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "alignmentfile_pairedness.py",
                            "entry": "#!/usr/bin/env python3\n\nimport pysam\nimport argparse\nimport pathlib\n\ndef parse_command() -> argparse.Namespace:\n    \"\"\"Function to parse the command line input\n    Args:\n        None\n    Return:\n        Namespace: returns the args as a standard Namespace object\n    \"\"\"\n    parser = argparse.ArgumentParser(description='Determine if input BAM,CRAM,SAM file is paried or single end')\n    parser.add_argument('--input_reads',\n        required=True,\n        help=\"Path to the BAM,CRAM,SAM file. If providing a CRAM, you must also provide an input_reference.\")\n    parser.add_argument('--input_reference',\n        help=\"For CRAM only, provide the reference file used when making the input_reads\")\n    parser.add_argument('--max_reads',\n        type=int,\n        default=200_000,\n        help=\"The max number of reads to examine to make PAIRED/SINGLE determination. default=%default\")\n    parser.add_argument('--threads',\n        type=int,\n        default=1,\n        help=\"For BAM/CRAM decompression, provide the number of threads. default=%default\")\n    args = parser.parse_args()\n    exit = False\n    reasons = []\n    if not args.input_reads.endswith(('.bam','.cram','.sam')):\n        exit = True\n        reasons.append(f\"input_reads must be a BAM, CRAM, or SAM file\")\n    if args.input_reads.endswith('.cram') and args.input_reference is None:\n        exit = True\n        reasons.append(f\"input_reference is required when providing a CRAM file\")\n    if not pathlib.Path(args.input_reads).is_file():\n        exit = True\n        reasons.append(f\"input_reads is not a file\")\n    if args.input_reference is not None and not pathlib.Path(args.input_reference).is_file():\n        exit = True\n        reasons.append(f\"input_reference is not a file\")\n    if exit:\n        raise Exception(\"{}{}\".format(chr(10),chr(10).join(reasons)))\n    else:\n        return args\n\ndef count_reads(insam: pysam.AlignmentFile, max_count: int) -> tuple[int, ...]:\n    \"\"\"\n    Count paired in single reads from an alignment file up to max_count reads.\n    Args:\n      insam: (pysam.AlignmentFile) File from which to count reads\n      max_count: (int) Maximum number of reads to count\n    Return:\n      tuple[int, ...]: returns tuple of counts paired, single, and total\n    \"\"\"\n    total_count = paired_count = single_count = 0\n    for aligned_read in insam:\n        if aligned_read.is_paired:\n            paired_count += 1\n        else:\n            single_count += 1\n        total_count += 1\n        if total_count >= max_count: break\n    return paired_count, single_count, total_count\n\ndef main():\n    args = parse_command()\n    samfile = pysam.AlignmentFile(args.input_reads, 'r', reference_filename=args.input_reference, threads=args.threads)\n    paired_count, single_count, total_count = count_reads(samfile, args.max_reads)\n    if paired_count/total_count > 0.9:\n        print(\"ReadType:PAIRED\")\n    elif paired_count/total_count < 0.1:\n        print(\"ReadType:SINGLE\")\n    else:\n        print(\"ReadType:MIXED\")\n\nif __name__ == '__main__':\n    main()\n"
                        }
                    ]
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "quay.io/biocontainers/pysam:0.22.0--py310h41dec4a_0"
                }
            ],
            "baseCommand": [
                "python",
                "alignmentfile_pairedness.py"
            ],
            "stdout": "$(inputs.output_filename)",
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--threads"
                    },
                    "doc": "CPUs to allocate to this task",
                    "id": "#alignmentfile_pairedness.cwl/cpu"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--input_reads"
                    },
                    "doc": "Input BAM/SAM file",
                    "id": "#alignmentfile_pairedness.cwl/input_reads"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": true
                        }
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--input_reference"
                    },
                    "doc": "For CRAM only, provide the reference file used when making the input_reads",
                    "id": "#alignmentfile_pairedness.cwl/input_reference"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--max_reads"
                    },
                    "doc": "The max number of reads to examine to make PAIRED/SINGLE determination",
                    "id": "#alignmentfile_pairedness.cwl/max_reads"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "pairedness.txt",
                    "inputBinding": {
                        "position": 9,
                        "shellQuote": false,
                        "prefix": ">"
                    },
                    "doc": "String to use for output filename",
                    "id": "#alignmentfile_pairedness.cwl/output_filename"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 16,
                    "doc": "RAM to allocate to this task",
                    "id": "#alignmentfile_pairedness.cwl/ram"
                }
            ],
            "outputs": [
                {
                    "type": "boolean",
                    "outputBinding": {
                        "glob": "$(inputs.output_filename)",
                        "loadContents": true,
                        "outputEval": "$(returnKeyValue(self[0].contents.trim(), \"ReadType\") == \"PAIRED\")\n"
                    },
                    "id": "#alignmentfile_pairedness.cwl/is_paired_end"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_filename)",
                        "loadContents": true
                    },
                    "id": "#alignmentfile_pairedness.cwl/pairedness_stdout"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#annoFuse.cwl",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/annofuse:0.92.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 4,
                    "ramMin": 8000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "annoFusePerSample.R",
                            "entry": "library(\"annoFuse\")\n\nsuppressPackageStartupMessages(library(\"readr\"))\nsuppressPackageStartupMessages(library(\"tidyverse\"))\nsuppressPackageStartupMessages(library(\"reshape2\"))\nsuppressPackageStartupMessages(library(\"optparse\"))\n\noption_list <- list(\n  make_option(c(\"-a\", \"--fusionfileArriba\"),type=\"character\",\n              help=\"Formatted fusion calls from arriba\"),\n  make_option(c(\"-s\", \"--fusionfileStarFusion\"),type=\"character\",\n              help=\"Formatted fusion calls from starfusion\"),\n  make_option(c(\"-e\", \"--expressionFile\"),type=\"character\",\n              help=\"RSEM file for sample\"),\n  make_option(c(\"-t\", \"--tumorID\"),type=\"character\",\n              help=\"Sample name to rename column in RSEM FPKM column\"),\n  make_option(c(\"-o\",\"--outputfile\"),type=\"character\",\n              help=\"Formatted and filtered fusion calls from [STARfusion | Arriba] (.TSV)\")\n)\n\n#read in caller results\nopt <- parse_args(OptionParser(option_list=option_list))\nArribainputfile <- opt$fusionfileArriba\nSTARFusioninputfile <- opt$fusionfileStarFusion\nexpressionFile<-opt$expressionFile\ntumorID<-opt$tumorID\noutputfile <- opt$outputfile\n\nstandardFusioncalls <- annoFuse::annoFuse_single_sample(\n   # Example files are provided in extdata, at-least 1 fusionfile is required along \n   # with its rsem expression file\n   fusionfileArriba = Arribainputfile,\n   fusionfileStarFusion = STARFusioninputfile,\n   expressionFile = expressionFile,\n   tumorID = tumorID,\n   # multiple read flag values for filtering using FusionAnnotator values\n   artifactFilter = \"GTEx_Recurrent|DGD_PARALOGS|Normal|BodyMap\",\n   # keep all in-frame , frameshift and other types of Fusion_Type\n   readingFrameFilter = \"in-frame|frameshift|other\",\n   # keep all fusions with atleast 1 junction read support\n   junctionReadCountFilter = 1,\n   # keep only fusions where spanningFragCount-junctionReadCountFilter less than equal to 100\n   spanningFragCountFilter = 100,\n   # filter read throughs\n   readthroughFilter = FALSE\n)\n\n\n# write to outputfile\nwrite.table(standardFusioncalls,outputfile,sep=\"\\t\",quote=FALSE,row.names = FALSE)\n"
                        }
                    ]
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "A_CT=`wc -l $(inputs.arriba_formatted_fusions.path) | cut -f 1 -d \" \"`\nS_CT=`wc -l $(inputs.starfusion_formatted_fusions.path) | cut -f 1 -d \" \"`\nif [ $A_CT -eq 1 ] && [ $S_CT -eq 1 ]; then\n  echo \"Both inputs are empty, will skip processing as there no fusions.\" >&2;\n  exit 0;\nfi\nRscript annoFusePerSample.R --fusionfileArriba $(inputs.arriba_formatted_fusions.path) --fusionfileStarFusion $(inputs.starfusion_formatted_fusions.path) --expressionFile $(inputs.rsem_expr_file.path) --tumorID $(inputs.sample_name) --outputfile $(inputs.output_basename).annoFuse_filter.tsv"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "arriba fusion file formatted by format_fusion_file.cwl, and annotated by fusion_annotator.cwl",
                    "id": "#annoFuse.cwl/arriba_formatted_fusions"
                },
                {
                    "type": "string",
                    "id": "#annoFuse.cwl/output_basename"
                },
                {
                    "type": "File",
                    "doc": "gzipped rsem gene expression file",
                    "id": "#annoFuse.cwl/rsem_expr_file"
                },
                {
                    "type": "string",
                    "id": "#annoFuse.cwl/sample_name"
                },
                {
                    "type": "File",
                    "doc": "STARFusion file formatted by format_fusion_file.cwl",
                    "id": "#annoFuse.cwl/starfusion_formatted_fusions"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "*.tsv"
                    },
                    "id": "#annoFuse.cwl/filtered_fusions_tsv"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#arriba_draw_2.2.1.cwl",
            "label": "Arriba Draw v2.2.1",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/arriba:2.2.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": "${ return inputs.memory * 1000 }"
                }
            ],
            "baseCommand": [
                "/arriba_v2.2.1/draw_fusions.R"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "--output=$(inputs.fusions.nameroot).pdf"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_draw_2.2.1.cwl/cytobands/cytobands",
                            "symbols": [
                                "#arriba_draw_2.2.1.cwl/cytobands/cytobands/hg38_GRCh38",
                                "#arriba_draw_2.2.1.cwl/cytobands/cytobands/hg19_hs37d5_GRCh37",
                                "#arriba_draw_2.2.1.cwl/cytobands/cytobands/mm10_GRCm38",
                                "#arriba_draw_2.2.1.cwl/cytobands/cytobands/mm39_GRCm39"
                            ]
                        }
                    ],
                    "default": "hg38_GRCh38",
                    "doc": "Path to built-in coordinates of the Giemsa staining bands to draw ideograms",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--cytobands=",
                        "separate": false,
                        "valueFrom": "/arriba_v2.2.1/database/cytobands_$(self)_v2.2.1.tsv",
                        "shellQuote": false
                    },
                    "id": "#arriba_draw_2.2.1.cwl/cytobands"
                },
                {
                    "type": "File",
                    "doc": "Fusion calls from Arriba OR STAR-Fusion",
                    "inputBinding": {
                        "prefix": "--fusions=",
                        "separate": false,
                        "position": 1
                    },
                    "id": "#arriba_draw_2.2.1.cwl/fusions"
                },
                {
                    "type": "File",
                    "doc": "STAR-aligned, coordinate sorted bam file",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": false
                        },
                        {
                            "pattern": "^.bai",
                            "required": false
                        }
                    ],
                    "inputBinding": {
                        "prefix": "--alignments=",
                        "separate": false,
                        "position": 1
                    },
                    "id": "#arriba_draw_2.2.1.cwl/genome_aligned_bam"
                },
                {
                    "type": "File",
                    "doc": "GTF file used for alignment indexing",
                    "inputBinding": {
                        "prefix": "--annotation=",
                        "separate": false,
                        "position": 1
                    },
                    "id": "#arriba_draw_2.2.1.cwl/gtf_anno"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Adjust memory, set in GB",
                    "default": 16,
                    "id": "#arriba_draw_2.2.1.cwl/memory"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_draw_2.2.1.cwl/protein_domains/protein_domains",
                            "symbols": [
                                "#arriba_draw_2.2.1.cwl/protein_domains/protein_domains/hg38_GRCh38",
                                "#arriba_draw_2.2.1.cwl/protein_domains/protein_domains/hg19_hs37d5_GRCh37",
                                "#arriba_draw_2.2.1.cwl/protein_domains/protein_domains/mm10_GRCm38",
                                "#arriba_draw_2.2.1.cwl/protein_domains/protein_domains/mm39_GRCm39"
                            ]
                        }
                    ],
                    "default": "hg38_GRCh38",
                    "doc": "Path to built-in protein domain annotation",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--proteinDomains=",
                        "separate": false,
                        "valueFrom": "/arriba_v2.2.1/database/protein_domains_$(self)_v2.2.1.gff3",
                        "shellQuote": false
                    },
                    "id": "#arriba_draw_2.2.1.cwl/protein_domains"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.fusions.nameroot).pdf"
                    },
                    "id": "#arriba_draw_2.2.1.cwl/arriba_pdf"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#arriba_fusion_2.2.1.cwl",
            "label": "Arriba Fusion Caller v2.2.1",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/arriba:2.2.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": "${ return inputs.memory * 1000 }"
                }
            ],
            "baseCommand": [
                "/arriba_v2.2.1/arriba"
            ],
            "arguments": [
                {
                    "position": 0,
                    "shellQuote": false,
                    "valueFrom": "-o $(inputs.outFileNamePrefix).arriba_2.2.1.fusions.tsv -O $(inputs.outFileNamePrefix).arriba_2.2.1.discarded_fusions.tsv"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_fusion_2.2.1.cwl/arriba_strand_flag/arriba_strand_flag",
                            "symbols": [
                                "#arriba_fusion_2.2.1.cwl/arriba_strand_flag/arriba_strand_flag/auto",
                                "#arriba_fusion_2.2.1.cwl/arriba_strand_flag/arriba_strand_flag/yes",
                                "#arriba_fusion_2.2.1.cwl/arriba_strand_flag/arriba_strand_flag/no",
                                "#arriba_fusion_2.2.1.cwl/arriba_strand_flag/arriba_strand_flag/reverse"
                            ]
                        }
                    ],
                    "default": "auto",
                    "doc": "input strandedness flag",
                    "inputBinding": {
                        "prefix": "-s",
                        "position": 1
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/arriba_strand_flag"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_fusion_2.2.1.cwl/blacklist/blacklist",
                            "symbols": [
                                "#arriba_fusion_2.2.1.cwl/blacklist/blacklist/hg38_GRCh38",
                                "#arriba_fusion_2.2.1.cwl/blacklist/blacklist/hg19_hs37d5_GRCh37",
                                "#arriba_fusion_2.2.1.cwl/blacklist/blacklist/mm10_GRCm38",
                                "#arriba_fusion_2.2.1.cwl/blacklist/blacklist/mm39_GRCm39"
                            ]
                        }
                    ],
                    "default": "hg38_GRCh38",
                    "doc": "Path to built-in blacklist to use",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-b",
                        "valueFrom": "/arriba_v2.2.1/database/blacklist_$(self)_v2.2.1.tsv.gz",
                        "shellQuote": false
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/blacklist"
                },
                {
                    "type": "File",
                    "doc": "STAR-aligned, coordinate sorted bam file",
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": false
                        },
                        {
                            "pattern": "^.bai",
                            "required": false
                        }
                    ],
                    "inputBinding": {
                        "prefix": "-x",
                        "position": 1
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/genome_aligned_bam"
                },
                {
                    "type": "File",
                    "doc": "GTF file used for alignment indexing",
                    "inputBinding": {
                        "prefix": "-g",
                        "position": 1
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/gtf_anno"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_fusion_2.2.1.cwl/known/known",
                            "symbols": [
                                "#arriba_fusion_2.2.1.cwl/known/known/hg38_GRCh38",
                                "#arriba_fusion_2.2.1.cwl/known/known/hg19_hs37d5_GRCh37",
                                "#arriba_fusion_2.2.1.cwl/known/known/mm10_GRCm38",
                                "#arriba_fusion_2.2.1.cwl/known/known/mm39_GRCm39"
                            ]
                        }
                    ],
                    "default": "hg38_GRCh38",
                    "doc": "Path to built-in known/recurrent fusions",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-k",
                        "valueFrom": "/arriba_v2.2.1/database/known_fusions_$(self)_v2.2.1.tsv.gz",
                        "shellQuote": false
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/known"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Mem intensive tool. Set in GB",
                    "default": 64,
                    "id": "#arriba_fusion_2.2.1.cwl/memory"
                },
                {
                    "type": "string",
                    "id": "#arriba_fusion_2.2.1.cwl/outFileNamePrefix"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_fusion_2.2.1.cwl/protein_domains/protein_domains",
                            "symbols": [
                                "#arriba_fusion_2.2.1.cwl/protein_domains/protein_domains/hg38_GRCh38",
                                "#arriba_fusion_2.2.1.cwl/protein_domains/protein_domains/hg19_hs37d5_GRCh37",
                                "#arriba_fusion_2.2.1.cwl/protein_domains/protein_domains/mm10_GRCm38",
                                "#arriba_fusion_2.2.1.cwl/protein_domains/protein_domains/mm39_GRCm39"
                            ]
                        }
                    ],
                    "default": "hg38_GRCh38",
                    "doc": "Path to built-in protein domain annotation",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-p",
                        "valueFrom": "/arriba_v2.2.1/database/protein_domains_$(self)_v2.2.1.gff3",
                        "shellQuote": false
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/protein_domains"
                },
                {
                    "type": "File",
                    "doc": "Fasta reference file used for alignment",
                    "inputBinding": {
                        "prefix": "-a",
                        "position": 1
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/reference_fasta"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#arriba_fusion_2.2.1.cwl/tags/tags",
                            "symbols": [
                                "#arriba_fusion_2.2.1.cwl/tags/tags/hg38_GRCh38",
                                "#arriba_fusion_2.2.1.cwl/tags/tags/hg19_hs37d5_GRCh37",
                                "#arriba_fusion_2.2.1.cwl/tags/tags/mm10_GRCm38",
                                "#arriba_fusion_2.2.1.cwl/tags/tags/mm39_GRCm39"
                            ]
                        }
                    ],
                    "default": "hg38_GRCh38",
                    "doc": "Path to built-in tag files. Typically same as known input",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-t",
                        "valueFrom": "/arriba_v2.2.1/database/known_fusions_$(self)_v2.2.1.tsv.gz",
                        "shellQuote": false
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/tags"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.outFileNamePrefix).arriba_2.2.1.fusions.tsv"
                    },
                    "id": "#arriba_fusion_2.2.1.cwl/arriba_fusions"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#awk_junction_filtering.cwl",
            "doc": "Takes JC.txt file output from rmats and removes calls that have junction counts (sum of fields: IJC_SAMPLE_1,SJC_SAMPLE_1,IJC_SAMPLE_2,SJC_SAMPLE_2) less than 10",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "ubuntu:20.04"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": "$(inputs.ram * 1000)",
                    "coresMin": "$(inputs.threads)"
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "awk -F'\\t' 'NR==1 { for (i=1; i<=NF; i++) { f[$i] = i } print $line } $f[\"IJC_SAMPLE_1\"]+$f[\"IJC_SAMPLE_2\"]+$f[\"SJC_SAMPLE_1\"]+$f[\"SJC_SAMPLE_2\"] >= 10 {print $line}' $(inputs.input_jc_file.path) > ${ var arr = inputs.input_jc_file.basename.split('.'); arr.splice(-4,0,'filtered'); return arr.join('.') }"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "JC.txt file output form rmats",
                    "id": "#awk_junction_filtering.cwl/input_jc_file"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 2,
                    "doc": "GB of RAM to allocate to this task.",
                    "id": "#awk_junction_filtering.cwl/ram"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "The number of threads. The optimal number of threads should be equal to the number of CPU cores.",
                    "id": "#awk_junction_filtering.cwl/threads"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*filtered.*MATS.JC.txt"
                    },
                    "id": "#awk_junction_filtering.cwl/output"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bam_strandness.cwl",
            "doc": "Converts the input BAM into a SAM file of n_reads * 2 length. Then it runs check_strandedness on that tiny SAM file.",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement",
                    "expressionLib": [
                        "/**\n* Given the contents of a file and a string keyword. Return the post-colon value on the line containing the keyWord\n* For instance if the line contents were KeyWord:Value, the function will return Value.\n*\n* @param {String} fileContents - The contents of the file\n* @param {String} keyWord - The exact keyWord for which we will be checking\n* @return {String, null} the string after the keyWord and colon; null if no keyWord found\n*/\nfunction returnKeyValue (fileContents, keyWord) {\n  var rows = fileContents.split(/\\r?\\n/);\n  for (var row in rows) {\n    if (rows[row].search(keyWord) == 0) {\n      return rows[row].split(':')[1];\n    }\n  }\n  return null;\n}\n"
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.cpu)",
                    "ramMin": "$(inputs.ram * 1000)"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/stranded:1.1.0"
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "/bin/bash -c ' samtools view -h $(inputs.input_bam.path) | head -n $(inputs.n_reads * 2) | $(inputs.paired_end ? \"samtools sort -n -@ \" + (inputs.cpu - 3) + \" |\" : \"\") samtools fastq -@ 2 -n $(inputs.paired_end ? \"-1 1.fastq -2 2.fastq -0 /dev/null\" : \"-0 1.fastq\") -s /dev/null"
                },
                {
                    "position": 10,
                    "shellQuote": false,
                    "prefix": "&&",
                    "valueFrom": "check_strandedness --gtf $(inputs.annotation_gtf.path) --kallisto_index $(inputs.kallisto_idx.path) --reads_1 1.fastq $(inputs.paired_end ? \"--reads_2 2.fastq\" : \"\") --nreads $(inputs.n_reads) > $(inputs.input_bam.nameroot).bam.strandness'"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "gtf file from `gtf_anno` is the primary gtf from gencode",
                    "id": "#bam_strandness.cwl/annotation_gtf"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 16,
                    "doc": "CPUs to allocate to this task",
                    "id": "#bam_strandness.cwl/cpu"
                },
                {
                    "type": "File",
                    "doc": "Input bam file",
                    "id": "#bam_strandness.cwl/input_bam"
                },
                {
                    "type": "File",
                    "doc": "Specialized index of a **transcriptome** fasta file for kallisto",
                    "id": "#bam_strandness.cwl/kallisto_idx"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "number of reads to sample",
                    "default": 200000,
                    "id": "#bam_strandness.cwl/n_reads"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Set to true if reads are paired end.",
                    "id": "#bam_strandness.cwl/paired_end"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 32,
                    "doc": "GB of RAM to allocate to this task",
                    "id": "#bam_strandness.cwl/ram"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "outputBinding": {
                        "glob": "*.bam.strandness",
                        "loadContents": true,
                        "outputEval": "${\n  var rows = self[0].contents.trim().split(/\\r?\\n/);\n  for (var rowNum in rows) {\n    if (rows[rowNum].search(\"PairEnd\") != -1) { return true; }\n    if (rows[rowNum].search(\"SingleEnd\") != -1) { return false; }\n  }\n  return null;\n}\n"
                    },
                    "id": "#bam_strandness.cwl/is_paired_end"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.bam.strandness"
                    },
                    "id": "#bam_strandness.cwl/output"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "outputBinding": {
                        "glob": "*.bam.strandness",
                        "loadContents": true,
                        "outputEval": "$(parseInt(returnKeyValue(self[0].contents.trim(), \"MedianReadLength\")))\n"
                    },
                    "id": "#bam_strandness.cwl/read_length_median"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "outputBinding": {
                        "glob": "*.bam.strandness",
                        "loadContents": true,
                        "outputEval": "$(parseFloat(returnKeyValue(self[0].contents.trim(), \"StddevReadLength\")))\n"
                    },
                    "id": "#bam_strandness.cwl/read_length_stddev"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#bam_strandness.cwl/strandedness/strandedness",
                            "symbols": [
                                "#bam_strandness.cwl/strandedness/strandedness/default",
                                "#bam_strandness.cwl/strandedness/strandedness/rf-stranded",
                                "#bam_strandness.cwl/strandedness/strandedness/fr-stranded"
                            ]
                        }
                    ],
                    "outputBinding": {
                        "glob": "*.bam.strandness",
                        "loadContents": true,
                        "outputEval": "${\n  var rows = self[0].contents.split(/\\r?\\n/).slice(0,-1);\n  var lastword = rows.pop().split(/\\s/).pop();\n  switch(lastword) {\n    case \"FR/fr-stranded\":\n    case \"FR/fr-secondstrand\":\n      return \"fr-stranded\";\n    case \"RF/rf-stranded\":\n    case \"RF/fr-firststrand\":\n      return \"rf-stranded\";\n    case \"unstranded\":\n      return \"default\";\n    default:\n      return null;\n  }\n}\n"
                    },
                    "id": "#bam_strandness.cwl/strandedness"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#reads_record_type.yml/reads_record"
                        }
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 4,
                    "ramMin": 4000
                }
            ],
            "baseCommand": [
                "echo",
                "done"
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#build_reads_record.cwl/cram_reference"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "id": "#build_reads_record.cwl/is_paired_end"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#build_reads_record.cwl/min_len"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#build_reads_record.cwl/outSAMattrRGline"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#build_reads_record.cwl/quality_base"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "id": "#build_reads_record.cwl/quality_cutoff"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#build_reads_record.cwl/r1_adapter"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#build_reads_record.cwl/r2_adapter"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": false
                        },
                        {
                            "pattern": ".bai",
                            "required": false
                        },
                        {
                            "pattern": "^.crai",
                            "required": false
                        },
                        {
                            "pattern": ".crai",
                            "required": false
                        }
                    ],
                    "id": "#build_reads_record.cwl/reads1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#build_reads_record.cwl/reads2"
                }
            ],
            "outputs": [
                {
                    "type": "#reads_record_type.yml/reads_record",
                    "outputBinding": {
                        "outputEval": "$({\"reads1\": inputs.reads1, \"reads2\": inputs.reads2, \"outSAMattrRGline\": inputs.outSAMattrRGline, \"cram_reference\": inputs.cram_reference, \"r1_adapter\": inputs.r1_adapter, \"r2_adapter\": inputs.r2_adapter, \"min_len\": inputs.min_len, \"quality_base\": inputs.quality_base, \"quality_cutoff\": inputs.quality_cutoff, \"is_paired_end\": inputs.is_paired_end})\n"
                    },
                    "id": "#build_reads_record.cwl/out_rr"
                }
            ],
            "id": "#build_reads_record.cwl"
        },
        {
            "class": "CommandLineTool",
            "id": "#clt_basename_picker.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "baseCommand": [
                "echo",
                "done"
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#clt_basename_picker.cwl/output_basename"
                },
                {
                    "type": "string",
                    "id": "#clt_basename_picker.cwl/root_name"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#clt_basename_picker.cwl/sample_name"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#clt_basename_picker.cwl/star_rg_line"
                }
            ],
            "outputs": [
                {
                    "type": "string",
                    "outputBinding": {
                        "outputEval": "$(inputs.output_basename ? inputs.output_basename : inputs.root_name)\n"
                    },
                    "id": "#clt_basename_picker.cwl/outname"
                },
                {
                    "type": "string",
                    "outputBinding": {
                        "outputEval": "${\n  var sample = inputs.sample_name ? inputs.sample_name : inputs.root_name;\n  var rgid = \"ID:\" + sample + \"_1\"\n  var rgid = \"ID:\" + sample + \"_1\"\n  var rglb = \"LB:\" + sample\n  var rgsm = \"SM:\" + sample\n  var rgpl = \"PL:Illumina\"\n  var rgds = \"DS:\\\"Values for this read group were auto-generated and may not reflect the true read group information.\\\"\"\n  var rg = inputs.star_rg_line ? inputs.star_rg_line : [rgid, rgpl, rglb, rgsm, rgds].join(\"\\t\")\n  return rg\n}\n"
                    },
                    "id": "#clt_basename_picker.cwl/outrg"
                },
                {
                    "type": "string",
                    "outputBinding": {
                        "outputEval": "$(inputs.sample_name ? inputs.sample_name : inputs.root_name)\n"
                    },
                    "id": "#clt_basename_picker.cwl/outsample"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#clt_parse_strand_param.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "baseCommand": [
                "echo",
                "done"
            ],
            "inputs": [
                {
                    "type": {
                        "type": "enum",
                        "name": "#clt_parse_strand_param.cwl/wf_strand_param/wf_strand_param",
                        "symbols": [
                            "#clt_parse_strand_param.cwl/wf_strand_param/wf_strand_param/default",
                            "#clt_parse_strand_param.cwl/wf_strand_param/wf_strand_param/rf-stranded",
                            "#clt_parse_strand_param.cwl/wf_strand_param/wf_strand_param/fr-stranded"
                        ]
                    },
                    "doc": "use 'default' for unstranded/auto, rf_stranded if read1 in the fastq read pairs is reverse complement to the transcript, fr-stranded if read1 same sense as transcript",
                    "id": "#clt_parse_strand_param.cwl/wf_strand_param"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#clt_parse_strand_param.cwl/arriba_std/arriba_std",
                            "symbols": [
                                "#clt_parse_strand_param.cwl/arriba_std/arriba_std/auto",
                                "#clt_parse_strand_param.cwl/arriba_std/arriba_std/reverse",
                                "#clt_parse_strand_param.cwl/arriba_std/arriba_std/yes"
                            ]
                        }
                    ],
                    "outputBinding": {
                        "outputEval": "${\n  var parse_dict = {\n    'default': 'auto',\n    'rf-stranded': 'reverse',\n    'fr-stranded': 'yes'\n  }\n  return parse_dict[inputs.wf_strand_param]\n}\n"
                    },
                    "id": "#clt_parse_strand_param.cwl/arriba_std"
                },
                {
                    "type": "string",
                    "outputBinding": {
                        "outputEval": "${\n  var parse_dict = {\n    'default': 'default',\n    'rf-stranded': 'rf-stranded',\n    'fr-stranded': 'fr-stranded'\n  }\n  return parse_dict[inputs.wf_strand_param]\n}\n"
                    },
                    "id": "#clt_parse_strand_param.cwl/kallisto_std"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#clt_parse_strand_param.cwl/rnaseqc_std/rnaseqc_std",
                            "symbols": [
                                "#clt_parse_strand_param.cwl/rnaseqc_std/rnaseqc_std/rf",
                                "#clt_parse_strand_param.cwl/rnaseqc_std/rnaseqc_std/fr"
                            ]
                        }
                    ],
                    "outputBinding": {
                        "outputEval": "${\n  var parse_dict = {\n    'default': null,\n    'rf-stranded': 'rf',\n    'fr-stranded': 'fr'\n  }\n  return parse_dict[inputs.wf_strand_param]\n}\n"
                    },
                    "id": "#clt_parse_strand_param.cwl/rnaseqc_std"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#clt_parse_strand_param.cwl/rsem_std/rsem_std",
                            "symbols": [
                                "#clt_parse_strand_param.cwl/rsem_std/rsem_std/none",
                                "#clt_parse_strand_param.cwl/rsem_std/rsem_std/forward",
                                "#clt_parse_strand_param.cwl/rsem_std/rsem_std/reverse"
                            ]
                        }
                    ],
                    "outputBinding": {
                        "outputEval": "${\n  var parse_dict = {\n    'default': 'none',\n    'rf-stranded': 'reverse',\n    'fr-stranded': 'forward'\n  }\n  return parse_dict[inputs.wf_strand_param]\n}\n"
                    },
                    "id": "#clt_parse_strand_param.cwl/rsem_std"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#cutadapter_3.4.cwl",
            "label": "Cutadapt v3.4 Trim",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/cutadapt:3.4"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": 16000
                }
            ],
            "baseCommand": [
                "cutadapt",
                "-j 8"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "-o TRIMMED.$(inputs.readFilesIn1.basename)"
                },
                {
                    "position": 3,
                    "shellQuote": false,
                    "valueFrom": "${\n  var arg = \"\";\n  if (inputs.r2_adapter && inputs.readFilesIn2){\n    arg = \" -p TRIMMED.\" + inputs.readFilesIn2.basename;\n  }\n  return arg;\n}"
                },
                {
                    "position": 5,
                    "shellQuote": false,
                    "valueFrom": "> $(inputs.sample_name).cutadapt_results.txt"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "If you do not use this option, reads that have a length of zero (empty reads) are kept in the output",
                    "default": 20,
                    "inputBinding": {
                        "prefix": "-m",
                        "position": 4
                    },
                    "id": "#cutadapter_3.4.cwl/min_len"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Phred scale used",
                    "default": 33,
                    "inputBinding": {
                        "prefix": "--quality-base",
                        "position": 4
                    },
                    "id": "#cutadapter_3.4.cwl/quality_base"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "doc": "Quality trim cutoff, see https://cutadapt.readthedocs.io/en/v3.4/guide.html#quality-trimming for how 5' 3' is handled",
                    "inputBinding": {
                        "prefix": "--quality-cutoff",
                        "position": 4,
                        "itemSeparator": ",",
                        "shellQuote": false
                    },
                    "id": "#cutadapter_3.4.cwl/quality_cutoff"
                },
                {
                    "type": "string",
                    "doc": "read1 adapter sequence",
                    "inputBinding": {
                        "prefix": "-a",
                        "position": 1
                    },
                    "id": "#cutadapter_3.4.cwl/r1_adapter"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "read2 adapter sequence, if paired",
                    "inputBinding": {
                        "prefix": "-A",
                        "position": 3
                    },
                    "id": "#cutadapter_3.4.cwl/r2_adapter"
                },
                {
                    "type": "File",
                    "doc": "read1 fastq file",
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#cutadapter_3.4.cwl/readFilesIn1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "read2 fastq file, if paired",
                    "inputBinding": {
                        "position": 4
                    },
                    "id": "#cutadapter_3.4.cwl/readFilesIn2"
                },
                {
                    "type": "string",
                    "id": "#cutadapter_3.4.cwl/sample_name"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.sample_name).cutadapt_results.txt"
                    },
                    "id": "#cutadapter_3.4.cwl/cutadapt_stats"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(\"*TRIMMED.\" + inputs.readFilesIn1.basename)"
                    },
                    "id": "#cutadapter_3.4.cwl/trimmedReadsR1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${ if (inputs.readFilesIn2){ return \"*TRIMMED.\" + inputs.readFilesIn2.basename; } else{ return null; } }"
                    },
                    "id": "#cutadapter_3.4.cwl/trimmedReadsR2"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#format_arriba_fusion_file.cwl",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": 4000,
                    "coresMin": 2
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/annofuse:0.92.0"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "formatArribaFusionCalls.R",
                            "entry": "suppressPackageStartupMessages(library(\"readr\"))\nsuppressPackageStartupMessages(library(\"dplyr\"))\nsuppressPackageStartupMessages(library(\"optparse\"))\n\n\noption_list <- list(\n  make_option(c(\"-f\", \"--fusionfile\"),type=\"character\",\n              help=\"Fusion calls from Arriba\"),\n  make_option(c(\"-t\", \"--tumorid\"), type=\"character\",\n              help=\"KF tumor id\"),\n  make_option(c(\"-o\",\"--outputfile\"),type=\"character\",\n              help=\"Formatted fusion calls from [STARfusion | Arriba] (.TSV)\")\n)\n\n# Get command line options, if help option encountered print help and exit,\nopt <- parse_args(OptionParser(option_list=option_list))\ninputfile <- opt$fusionfile\ntumorid <- opt$tumorid\noutputfile <- opt$outputfile\n\ndf<-read_tsv(inputfile,col_types = readr::cols(breakpoint1 = readr::col_character(),breakpoint2 = readr::col_character()))\ndf$`gene1--gene2`<-paste(df$`#gene1`,df$gene2,sep=\"--\")\n\n\n# write to output file\nwrite.table(df,outputfile,sep=\"\\t\",quote=FALSE,row.names = FALSE)\n"
                        }
                    ]
                }
            ],
            "baseCommand": [
                "Rscript",
                "formatArribaFusionCalls.R"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "--outputfile $(inputs.sample_name).arriba_formatted.tsv"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "Arriba fusion file",
                    "inputBinding": {
                        "prefix": "--fusionfile",
                        "position": 1
                    },
                    "id": "#format_arriba_fusion_file.cwl/arriba_fusion_file"
                },
                {
                    "type": "string",
                    "doc": "Sample name",
                    "inputBinding": {
                        "prefix": "--tumorid",
                        "position": 1
                    },
                    "id": "#format_arriba_fusion_file.cwl/sample_name"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.tsv"
                    },
                    "id": "#format_arriba_fusion_file.cwl/formatted_fusion_tsv"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#fusion_annotator.cwl",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/fusionannotator:0.1.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 4,
                    "ramMin": 8000
                }
            ],
            "baseCommand": [
                "tar"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "-I pigz -xf $(inputs.genome_tar.path) && /opt/FusionAnnotator/FusionAnnotator --genome_lib_dir ./$(inputs.genome_untar_path) --annotate $(inputs.input_fusion_file.path) --fusion_name_col $(inputs.col_num) > $(inputs.output_basename).annotated.tsv"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "column number in file of fusion name, use 24 for arriba v1.1, 30 for v2",
                    "default": 30,
                    "id": "#fusion_annotator.cwl/col_num"
                },
                {
                    "type": "File",
                    "id": "#fusion_annotator.cwl/genome_tar"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "This is what the path will be when genome_tar is unpackaged",
                    "default": "GRCh38_v39_CTAT_lib_Mar242022.CUSTOM",
                    "id": "#fusion_annotator.cwl/genome_untar_path"
                },
                {
                    "type": "File",
                    "doc": "Fusion file formatted by format_fusion_file.cwl, likely from arriba input",
                    "id": "#fusion_annotator.cwl/input_fusion_file"
                },
                {
                    "type": "string",
                    "id": "#fusion_annotator.cwl/output_basename"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.tsv"
                    },
                    "id": "#fusion_annotator.cwl/annotated_tsv"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#kallisto_calc_expression.cwl",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "images.sbgenomics.com/uros_sipetic/kallisto:0.43.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": 10000
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#reads_record_type.yml/reads_record"
                        }
                    ]
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "kallisto quant -i $(inputs.transcript_idx.path) -o output -b 10 -t 8 $(inputs.strand ? inputs.strand == \"default\" ? \"\" : \"--\"+inputs.strand : \"\") $(inputs.reads_records.every(function(e) { return !e.is_paired_end }) ? [\"--single\", \"-l\", inputs.avg_frag_len, \"-s\", inputs.std_dev].join(' ') : \"\") $(inputs.reads_records.map(function(e) { return (e.reads2 != null ? [e.reads1.path, e.reads2.path].join(' ') : e.reads1.path) }).join(' ')) && mv output/abundance.tsv $(inputs.SampleID).kallisto.abundance.tsv && gzip $(inputs.SampleID).kallisto.abundance.tsv"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#kallisto_calc_expression.cwl/SampleID"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "id": "#kallisto_calc_expression.cwl/avg_frag_len"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#reads_record_type.yml/reads_record"
                    },
                    "id": "#kallisto_calc_expression.cwl/reads_records"
                },
                {
                    "type": [
                        "null",
                        "long"
                    ],
                    "id": "#kallisto_calc_expression.cwl/std_dev"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "input none if unstranded, otherwise rf-stranded or fr-stranded",
                    "id": "#kallisto_calc_expression.cwl/strand"
                },
                {
                    "type": "File",
                    "id": "#kallisto_calc_expression.cwl/transcript_idx"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.abundance.tsv.gz"
                    },
                    "id": "#kallisto_calc_expression.cwl/abundance_out"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#rmats_both_bam.cwl",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "xinglab/rmats:v4.1.2"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": "$(inputs.ram * 1000)",
                    "coresMin": "$(inputs.threads)"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "sample_1.txt",
                            "entry": "$(inputs.sample_1.map(function(e){return e.path}).join())\n"
                        },
                        {
                            "entryname": "sample_2.txt",
                            "entry": "$(inputs.sample_2 ? inputs.sample_2.map(function(e){return e.path}).join() : '')\n"
                        }
                    ]
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 3,
                    "shellQuote": false,
                    "valueFrom": "&& for i in ./$(inputs.output_directory)/*.txt; do cp $i $(inputs.output_directory).`basename $i`; done"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--allow-clipping"
                    },
                    "doc": "Allow alignments with soft or hard clipping to be used.",
                    "id": "#rmats_both_bam.cwl/allow_clipping"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--anchorLength"
                    },
                    "doc": "The anchor length. Tool default: 1",
                    "id": "#rmats_both_bam.cwl/anchor_length"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "doc": "The cutoff used in the null hypothesis test for differential splicing. Tool default is 0.0001 for 0.01% difference. Valid: 0 <= cutoff < 1. Does not apply to the paired stats model",
                    "id": "#rmats_both_bam.cwl/cutoff_splice_diff"
                },
                {
                    "type": [
                        "null",
                        "Directory"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--fixed-event-set"
                    },
                    "doc": "A directory containing fromGTF.[AS].txt files to be used instead of detecting a new set of events.",
                    "id": "#rmats_both_bam.cwl/fixed_event_set"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--gtf"
                    },
                    "doc": "Input gtf annotation file.",
                    "id": "#rmats_both_bam.cwl/gtf_annotation"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--mel"
                    },
                    "doc": "Maximum Exon Length. Only impacts --novelSS behavior. Tool Default: 500",
                    "id": "#rmats_both_bam.cwl/maximum_exon_length"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--mil"
                    },
                    "doc": "Minimum Intron Length. Only impacts --novelSS behavior. Tool Default: 50",
                    "id": "#rmats_both_bam.cwl/minimum_intron_length"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--novelSS"
                    },
                    "doc": "Select for novel splice site detection or unannotated splice sites. 'true' to detect or add this parameter, 'false' to disable denovo detection. Tool Default: false",
                    "id": "#rmats_both_bam.cwl/novel_splice_sites"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--od"
                    },
                    "doc": "Name of output directory",
                    "id": "#rmats_both_bam.cwl/output_directory"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--paired-stats"
                    },
                    "doc": "Use the paired stats model",
                    "id": "#rmats_both_bam.cwl/paired_stats"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 4,
                    "doc": "GB of RAM to allocate to this task.",
                    "id": "#rmats_both_bam.cwl/ram"
                },
                {
                    "type": "int",
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--readLength"
                    },
                    "doc": "Input read length for sample reads.",
                    "id": "#rmats_both_bam.cwl/read_length"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#rmats_both_bam.cwl/read_type/read_type/paired",
                                "#rmats_both_bam.cwl/read_type/read_type/single"
                            ],
                            "name": "#rmats_both_bam.cwl/read_type/read_type"
                        }
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "-t"
                    },
                    "doc": "Select one option for input read type either paired or single. Tool default: paired",
                    "id": "#rmats_both_bam.cwl/read_type"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--b1",
                        "valueFrom": "sample_1.txt"
                    },
                    "doc": "Input sample 1 bam file.",
                    "id": "#rmats_both_bam.cwl/sample_1"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--b2",
                        "valueFrom": "sample_2.txt"
                    },
                    "doc": "Input sample 2 bam file.",
                    "id": "#rmats_both_bam.cwl/sample_2"
                },
                {
                    "type": [
                        "null",
                        "Directory"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--bi"
                    },
                    "doc": "The directory name of the STAR binary indices (name of the directory that contains the SA file). (Only if using fastq)",
                    "id": "#rmats_both_bam.cwl/star_indicies"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--statoff"
                    },
                    "doc": "Select to skip statistical analysis, either between two groups or on single sample group. 'true' to add this parameter. Tool default: false",
                    "id": "#rmats_both_bam.cwl/stat_off"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--tstat"
                    },
                    "doc": "The number of threads for the statistical model. If not set then the value of thread is used",
                    "id": "#rmats_both_bam.cwl/statistical_threads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#rmats_both_bam.cwl/strandedness/strandedness/fr-unstranded",
                                "#rmats_both_bam.cwl/strandedness/strandedness/fr-firststrand",
                                "#rmats_both_bam.cwl/strandedness/strandedness/fr-secondstrand"
                            ],
                            "name": "#rmats_both_bam.cwl/strandedness/strandedness"
                        }
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--libType"
                    },
                    "doc": "Select one option for input strandedness. Tool default: fr-unstranded",
                    "id": "#rmats_both_bam.cwl/strandedness"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#rmats_both_bam.cwl/task/task/prep",
                                "#rmats_both_bam.cwl/task/task/post",
                                "#rmats_both_bam.cwl/task/task/both"
                            ],
                            "name": "#rmats_both_bam.cwl/task/task"
                        }
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--task"
                    },
                    "doc": "Specify which step(s) of rMATS to run. prep: preprocess BAMs and generate a .rmats file. post: load .rmats file(s) into memory, detect and count alternative splicing events, and calculate P value (if not --statoff). both: prep + post. Tool default: both",
                    "id": "#rmats_both_bam.cwl/task"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "temp",
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--tmp"
                    },
                    "doc": "Name of temporary directory",
                    "id": "#rmats_both_bam.cwl/temp_directory"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 2,
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--nthread"
                    },
                    "doc": "The number of threads. The optimal number of threads should be equal to the number of CPU cores.",
                    "id": "#rmats_both_bam.cwl/threads"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--tophatAnchor"
                    },
                    "doc": "The 'anchor length' or 'overhang length' used in the aligner. At least 'anchor length' NT must be mapped to each end of a given junction. (Only if using fastq). Tool default: 6.",
                    "id": "#rmats_both_bam.cwl/tophat_anchor_length"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--variable-read-length"
                    },
                    "doc": "Allow reads with lengths that differ from --readLength to be processed. --readLength will still be used to determine IncFormLen and SkipFormLen.",
                    "default": true,
                    "id": "#rmats_both_bam.cwl/variable_read_length"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.A3SS.*JC.txt"
                    },
                    "id": "#rmats_both_bam.cwl/alternative_3_prime_splice_sites_jc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.A5SS.*JC.txt"
                    },
                    "id": "#rmats_both_bam.cwl/alternative_5_prime_splice_sites_jc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.MXE.*JC.txt"
                    },
                    "id": "#rmats_both_bam.cwl/mutually_exclusive_exons_jc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.RI.*JC.txt"
                    },
                    "id": "#rmats_both_bam.cwl/retained_introns_jc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.SE.*JC.txt"
                    },
                    "id": "#rmats_both_bam.cwl/skipped_exons_jc"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_directory)/summary.txt"
                    },
                    "id": "#rmats_both_bam.cwl/summary_file"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "temp/*_read_outcomes_by_bam.txt"
                    },
                    "id": "#rmats_both_bam.cwl/temp_read_outcomes"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#rnaseqc_2.4.2.cwl",
            "label": "RNA-SeQC 2.4.2",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "gcr.io/broad-cga-aarong-gtex/rnaseqc:2.4.2"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 8,
                    "ramMin": 16000
                }
            ],
            "baseCommand": [
                "rnaseqc"
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "Aligned and sorted BAM or CRAM file",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#rnaseqc_2.4.2.cwl/aligned_sorted_reads"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "BED file with intervals for estimating insert size distribution",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--bed"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/bed"
                },
                {
                    "type": "File",
                    "doc": "Collapsed GTF file",
                    "inputBinding": {
                        "position": 0
                    },
                    "id": "#rnaseqc_2.4.2.cwl/collapsed_gtf"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai"
                        }
                    ],
                    "doc": "If input is CRAM, provide reference",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--fasta"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/fasta"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "If true, will output format compatible with version 1.1.9",
                    "default": true,
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--legacy"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/legacy"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Turn on this flag to get progress updates",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "-v"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/logging"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "output",
                    "doc": "output dirname",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#rnaseqc_2.4.2.cwl/output_dirname"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#rnaseqc_2.4.2.cwl/stranded/rnaseqc_std",
                            "symbols": [
                                "#rnaseqc_2.4.2.cwl/stranded/rnaseqc_std/rf",
                                "#rnaseqc_2.4.2.cwl/stranded/rnaseqc_std/fr"
                            ]
                        }
                    ],
                    "doc": "If stranded, specify",
                    "default": "rf",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--stranded=",
                        "separate": false
                    },
                    "id": "#rnaseqc_2.4.2.cwl/stranded"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "If single-end, set to true",
                    "default": false,
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--unpaired"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/unpaired"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_dirname)/*.exon_reads.gct"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/Exon_count"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_dirname)/*.gene_tpm.gct"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/Gene_TPM"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_dirname)/*.gene_reads.gct"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/Gene_count"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_dirname)/*.metrics.tsv"
                    },
                    "id": "#rnaseqc_2.4.2.cwl/Metrics"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#rsem_calc_expression.cwl",
            "label": "RSEM v1.3.1 Calculate Expression",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "images.sbgenomics.com/uros_sipetic/rsem:1.3.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.num_threads)",
                    "ramMin": 24000
                }
            ],
            "baseCommand": [
                "tar"
            ],
            "arguments": [
                {
                    "position": 0,
                    "shellQuote": false,
                    "valueFrom": "-zxf $(inputs.genomeDir.path)"
                },
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "&& rsem-calculate-expression --no-bam-output --alignments"
                },
                {
                    "position": 3,
                    "shellQuote": false,
                    "valueFrom": "./$(inputs.genomeDir.nameroot.replace(\".tar\", \"\"))/$(inputs.genomeDir.nameroot.replace(\".tar\", \"\")) $(inputs.outFileNamePrefix).rsem"
                },
                {
                    "position": 4,
                    "shellQuote": false,
                    "valueFrom": "&& gzip *results"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "If available, append gene/tx name to gene/tx id",
                    "default": true,
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--append-names"
                    },
                    "id": "#rsem_calc_expression.cwl/append_names"
                },
                {
                    "type": "File",
                    "doc": "Aligned transcriptome bam",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#rsem_calc_expression.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Set this option if you want to estimate the read start position distribution (RSPD) from data",
                    "default": false,
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--estimate-rspd"
                    },
                    "id": "#rsem_calc_expression.cwl/estimate_rspd"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Maximum read/insert length allowed",
                    "default": 1000,
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--fragment-length-max"
                    },
                    "id": "#rsem_calc_expression.cwl/fragment_length_max"
                },
                {
                    "type": "File",
                    "doc": "RSEM reference tar ball",
                    "id": "#rsem_calc_expression.cwl/genomeDir"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num threads to use",
                    "default": 16,
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--num-threads"
                    },
                    "id": "#rsem_calc_expression.cwl/num_threads"
                },
                {
                    "type": "string",
                    "doc": "String to prepend output file names with",
                    "id": "#rsem_calc_expression.cwl/outFileNamePrefix"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "If input is paired-end, add this flag",
                    "default": true,
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--paired-end"
                    },
                    "id": "#rsem_calc_expression.cwl/paired_end"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#rsem_calc_expression.cwl/strandedness/strandedness",
                            "symbols": [
                                "#rsem_calc_expression.cwl/strandedness/strandedness/none",
                                "#rsem_calc_expression.cwl/strandedness/strandedness/forward",
                                "#rsem_calc_expression.cwl/strandedness/strandedness/reverse"
                            ]
                        }
                    ],
                    "default": "none",
                    "doc": "'none' refers to non-strand-specific protocols. 'forward' means all (upstream) reads are derived from the forward strand. 'reverse' means all (upstream) reads are derived from the reverse strand",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "--strandedness",
                        "shellQuote": false
                    },
                    "id": "#rsem_calc_expression.cwl/strandedness"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*genes.results.gz"
                    },
                    "id": "#rsem_calc_expression.cwl/gene_out"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*isoforms.results.gz"
                    },
                    "id": "#rsem_calc_expression.cwl/isoform_out"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_bam_to_cram.cwl",
            "doc": "This tool converts the input BAM into a CRAM.\nThe following programs are run in this tool:\n  - samtools view\n  - samtools index",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.cores)",
                    "ramMin": "$(inputs.ram * 1000)"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/samtools:1.9"
                }
            ],
            "baseCommand": [
                "samtools",
                "view"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "-C -o $(inputs.input_bam.nameroot).cram"
                },
                {
                    "position": 4,
                    "shellQuote": false,
                    "valueFrom": "&& samtools index $(inputs.input_bam.nameroot).cram"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 16,
                    "inputBinding": {
                        "prefix": "-@",
                        "position": 2
                    },
                    "id": "#samtools_bam_to_cram.cwl/cores"
                },
                {
                    "type": "File",
                    "doc": "Input bam file",
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#samtools_bam_to_cram.cwl/input_bam"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 32,
                    "doc": "GB of RAM to allocate to this task",
                    "id": "#samtools_bam_to_cram.cwl/ram"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        }
                    ],
                    "doc": "Reference fasta with associated fai index",
                    "inputBinding": {
                        "prefix": "-T",
                        "position": 2
                    },
                    "id": "#samtools_bam_to_cram.cwl/reference"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.cram"
                    },
                    "secondaryFiles": [
                        {
                            "pattern": ".crai",
                            "required": null
                        }
                    ],
                    "id": "#samtools_bam_to_cram.cwl/output"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_fastq.cwl",
            "label": "Samtools bam/cram-to-fastq",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/samtools:1.9"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.cores)",
                    "ramMin": "$(inputs.ram * 1000)"
                }
            ],
            "baseCommand": [
                "/bin/bash",
                "-c"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "set -eo pipefail\n${\n    if(inputs.is_paired_end){\n        var command = \"samtools sort -m 1G -n -O SAM -@ \" + inputs.cores\n        if (inputs.cram_reference){\n          command += \" --reference \" + inputs.cram_reference.path\n        }\n        command += \" \" + inputs.input_reads_1.path + \" | samtools fastq -c 2 -1 \" + inputs.SampleID + \".converted_1.fastq.gz -2 \" + inputs.SampleID + \".converted_2.fastq.gz -@ \" + inputs.cores+ \" -\"\n        return command\n    }\n    else {\n        var command = \"samtools sort -m 1G -n -O SAM -@ \" + inputs.cores\n        if (inputs.cram_reference){\n          command += \" --reference \" + inputs.cram_reference.path\n        }\n        command += \" \" + inputs.input_reads_1.path + \" | samtools fastq -c 2 -@ \" + inputs.cores + \" - > \" + inputs.SampleID + \".converted_1.fastq && bgzip \" + inputs.SampleID + \".converted_1.fastq\"\n        return command\n    }\n}"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#samtools_fastq.cwl/SampleID"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 16,
                    "id": "#samtools_fastq.cwl/cores"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        }
                    ],
                    "doc": "If input align is cram and you are uncertain all contigs are registered at http://www.ebi.ac.uk/ena/cram/md5/, provide here",
                    "id": "#samtools_fastq.cwl/cram_reference"
                },
                {
                    "type": "File",
                    "doc": "Input alignment file",
                    "id": "#samtools_fastq.cwl/input_reads_1"
                },
                {
                    "type": "boolean",
                    "doc": "Is the input_reads_1 file paired end?",
                    "id": "#samtools_fastq.cwl/is_paired_end"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 32,
                    "doc": "GB of RAM to allocate to this task",
                    "id": "#samtools_fastq.cwl/ram"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.converted_1.*"
                    },
                    "id": "#samtools_fastq.cwl/fq1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "*.converted_2.*"
                    },
                    "id": "#samtools_fastq.cwl/fq2"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_head.cwl",
            "doc": "By default, prints all headers from the specified input file to standard\noutput in SAM format. The input alignment file may be in SAM, BAM, or CRAM\nformat; if no FILE is specified, standard input will be read. With appropriate\noptions, only some of the headers and/or additionally some of the alignment\nrecords will be printed.\n\nThe samtools head command outputs SAM headers exactly as they appear in the\ninput file; in particular, it never adds an @PG header itself. (Other samtools\ncommands add such @PG headers to facilitate provenance tracking in analysis\npipelines, but because samtools head never outputs more than a handful of\nalignment records it is unsuitable for use in such contexts anyway.) \n\nTool can also has the option to run an additional grep filter on the output\nof samtools head.",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "staphb/samtools:1.20"
                }
            ],
            "baseCommand": [
                "samtools",
                "head"
            ],
            "arguments": [
                {
                    "position": 5,
                    "shellQuote": false,
                    "valueFrom": "> header.txt\n"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 3
                    },
                    "doc": "Input bam file",
                    "id": "#samtools_head.cwl/input_bam"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 4,
                        "shellQuote": false,
                        "prefix": "| grep"
                    },
                    "doc": "Additional grep filter for samtools head output",
                    "id": "#samtools_head.cwl/line_filter"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--headers"
                    },
                    "doc": "Number of header lines to output",
                    "id": "#samtools_head.cwl/num_headers"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 2,
                        "prefix": "--records"
                    },
                    "doc": "Number of record lines to output",
                    "id": "#samtools_head.cwl/num_records"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "header.txt"
                    },
                    "id": "#samtools_head.cwl/header_file"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_readlength_bam.cwl",
            "doc": "Does the following:\n- Uses samtools + head to view the first 1000000 lines of the input BAM\n- Using the BAM's 10th column determine the length of the record\n- From that list, get the unique read lengths and their total count\n- Order the counts in descending order",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/samtools:1.9"
                }
            ],
            "baseCommand": [
                "samtools",
                "view"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "$(inputs.input_bam.path) | head -n 1000000 | cut -f 10 | perl -ne 'chomp;print length($_) . \"\\n\"' | sort | uniq -c | sort -nr -k1,1 > $(inputs.input_bam.nameroot).bam_readlength"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "Input bam file",
                    "id": "#samtools_readlength_bam.cwl/input_bam"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.bam_readlength"
                    },
                    "id": "#samtools_readlength_bam.cwl/output"
                },
                {
                    "type": "int",
                    "outputBinding": {
                        "glob": "*.bam_readlength",
                        "loadContents": true,
                        "outputEval": "${\n  var rows = self[0].contents.split(/\\r?\\n/).slice(0,-1);\n  return parseInt(rows[0].split(/\\s/).pop());\n}\n"
                    },
                    "id": "#samtools_readlength_bam.cwl/top_readlength"
                },
                {
                    "type": "boolean",
                    "outputBinding": {
                        "glob": "*.bam_readlength",
                        "loadContents": true,
                        "outputEval": "${\n  var rows = self[0].contents.split(/\\r?\\n/).slice(0,-1);\n  return rows.length > 1;\n}\n"
                    },
                    "id": "#samtools_readlength_bam.cwl/variable_readlength"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_sort.cwl",
            "label": "Samtools coordinate sort bam",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/samtools:1.9"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.cores)",
                    "ramMin": "$(inputs.ram * 1000)"
                }
            ],
            "baseCommand": [
                "samtools"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "sort $(inputs.unsorted_bam.path) -@ $(inputs.cores) -m 1G -O bam > $(inputs.unsorted_bam.nameroot).sorted.bam && samtools index -@ $(inputs.cores) $(inputs.unsorted_bam.nameroot).sorted.bam $(inputs.unsorted_bam.nameroot).sorted.bai && ${\n  var cmd = \"echo skip sorting chimeric bam\";\n  if (inputs.chimeric_sam_out !== null){\n    var cmd = \"samtools view -bh -@ \" + inputs.cores + \" \" + inputs.chimeric_sam_out.path + \" -o \" + inputs.chimeric_sam_out.nameroot + \".bam\";\n  }\n  return cmd;\n}"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "chimeric bam file - created using v2.6 STAR, probably not in 2.7 STAR",
                    "id": "#samtools_sort.cwl/chimeric_sam_out"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num cores to use for sorting",
                    "default": 16,
                    "id": "#samtools_sort.cwl/cores"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "GB of RAM to allocate to this task.",
                    "default": 32,
                    "id": "#samtools_sort.cwl/ram"
                },
                {
                    "type": "File",
                    "doc": "Bam to sort, likely from STAR",
                    "id": "#samtools_sort.cwl/unsorted_bam"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${var out = ((inputs.chimeric_sam_out === null) ? null : inputs.chimeric_sam_out.nameroot + '.bam'); return out}"
                    },
                    "id": "#samtools_sort.cwl/chimeric_bam_out"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.sorted.bai"
                    },
                    "id": "#samtools_sort.cwl/sorted_bai"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.sorted.bam"
                    },
                    "id": "#samtools_sort.cwl/sorted_bam"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_split.cwl",
            "doc": "This tool splits the input bam input read group bams if it has more than one readgroup.\nPrograms run in this tool:\n  - samtools head | grep\n  - samtools split\nUsing samtools view and grep count the header lines starting with @RG. If that number is\nnot one, split the bam file into read group bams using samtools.",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "staphb/samtools:1.20"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": "$(inputs.ram * 1000)",
                    "coresMin": "$(inputs.cpu)"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "split_bam.sh",
                            "entry": "set -xeo pipefail\nRG_NUM=`samtools head $(inputs.input_reads.path) | grep -c ^@RG`\nif [ $RG_NUM != 1 ]; then\n  samtools split -f '%*_%#.bam' -@ $(inputs.cores) $(inputs.reference ? '--reference ' + inputs.reference.path : '') $(inputs.input_reads.path)\nfi"
                        }
                    ]
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 0,
                    "shellQuote": false,
                    "valueFrom": "/bin/bash split_bam.sh"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 36,
                    "doc": "Minimum reserved number of CPU cores for the task.",
                    "id": "#samtools_split.cwl/cpu"
                },
                {
                    "type": "File",
                    "doc": "Input bam file",
                    "id": "#samtools_split.cwl/input_reads"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 36,
                    "doc": "GB of RAM to allocate to the task.",
                    "id": "#samtools_split.cwl/ram"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "Reference fasta file",
                    "id": "#samtools_split.cwl/reference"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*.bam",
                        "outputEval": "${\n  if (self.length == 0) return [inputs.input_reads]\n  else return self\n}"
                    },
                    "id": "#samtools_split.cwl/bam_files"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#star_2.7.10a_align.cwl",
            "label": "STAR Aligner v2.7.10a",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/star:2.7.10a"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.runThreadN)",
                    "ramMin": 60000
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "reads_manifest.tsv",
                            "entry": "$(inputs.reads_records.map(function(e) { return [e.reads1.path, (e.reads2 != null ? e.reads2.path : \"-\"), e.outSAMattrRGline].join('\\t') }).join('\\n'))\n"
                        }
                    ]
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#reads_record_type.yml/reads_record"
                        }
                    ]
                }
            ],
            "baseCommand": [
                "tar",
                "-I pigz",
                "-xvf"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "$(inputs.genomeDir.path)"
                },
                {
                    "position": 2,
                    "shellQuote": false,
                    "valueFrom": "&& STAR --genomeDir ./$(inputs.genomeDir.nameroot.replace(\".tar\", \"\"))/ --readFilesCommand $(inputs.reads_records.some(function(e) { return e.reads1.nameext == '.gz' }) ? 'zcat' : 'cat') --readFilesManifest reads_manifest.tsv --outFileNamePrefix $(inputs.outFileNamePrefix)."
                },
                {
                    "position": 4,
                    "shellQuote": false,
                    "valueFrom": "&& pigz *ReadsPerGene.out.tab *SJ.out.tab"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/alignInsertionFlush/alignInsertionFlush",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/alignInsertionFlush/alignInsertionFlush/None",
                                "#star_2.7.10a_align.cwl/alignInsertionFlush/alignInsertionFlush/Right"
                            ]
                        }
                    ],
                    "default": "None",
                    "doc": "how to flush ambiguous insertion positions. None (default): insertions not flushed. Right: insertions flushed to the right. STAR Fusion recommended (SF)",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignInsertionFlush",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/alignInsertionFlush"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1000000,
                    "doc": "maximum intron size. SF recommends 100000",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignIntronMax"
                    },
                    "id": "#star_2.7.10a_align.cwl/alignIntronMax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1000000,
                    "doc": "maximum genomic distance between mates, SF recommends 100000 to avoid readthru fusions within 100k",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignMatesGapMax"
                    },
                    "id": "#star_2.7.10a_align.cwl/alignMatesGapMax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "minimum overhang for annotated junctions. SF recommends 10",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignSJDBoverhangMin"
                    },
                    "id": "#star_2.7.10a_align.cwl/alignSJDBoverhangMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "doc": "minimum overhang for unannotated junctions. ENCODE default used.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignSJoverhangMin",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/alignSJoverhangMin"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "0 -1 0 0",
                    "doc": "maximum number of mismatches for stitching of the splice junctions. Value '5 -1 5 5' improves SF chimeric junctions, also recommended by arriba (AR)",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignSJstitchMismatchNmax",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/alignSJstitchMismatchNmax"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/alignSoftClipAtReferenceEnds/alignSoftClipAtReferenceEnds",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/alignSoftClipAtReferenceEnds/alignSoftClipAtReferenceEnds/Yes",
                                "#star_2.7.10a_align.cwl/alignSoftClipAtReferenceEnds/alignSoftClipAtReferenceEnds/No"
                            ]
                        }
                    ],
                    "default": "Yes",
                    "doc": "allow the soft-clipping of the alignments past the end of the chromosomes. Yes (default): allow. No: prohibit, useful for compatibility with Cufflinks",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignSoftClipAtReferenceEnds",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/alignSoftClipAtReferenceEnds"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "doc": "minimum mapped length for a read mate that is spliced. SF recommends 30",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignSplicedMateMapLmin"
                    },
                    "id": "#star_2.7.10a_align.cwl/alignSplicedMateMapLmin"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.66,
                    "doc": "alignSplicedMateMapLmin normalized to mate length. SF recommends 0, AR 0.5",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--alignSplicedMateMapLminOverLmate"
                    },
                    "id": "#star_2.7.10a_align.cwl/alignSplicedMateMapLminOverLmate"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 15,
                    "doc": "minimum overhang for a chimeric junction. SF recommends 8, AR 10",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimJunctionOverhangMin"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimJunctionOverhangMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "maximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimMainSegmentMultNmax"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimMainSegmentMultNmax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "doc": "maximum number of chimeric multi-alignments. SF recommends 20, AR 50.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimMultimapNmax"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimMultimapNmax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "the score range for multi-mapping chimeras below the best chimeric score. Only works with chimMultimapNmax > 1. SF recommends 3",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimMultimapScoreRange"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimMultimapScoreRange"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 20,
                    "doc": "int>=0: to trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value. SF recommends 10",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimNonchimScoreDropMin"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimNonchimScoreDropMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "formatting type for the Chimeric.out.junction file, value 1 REQUIRED for SF",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimOutJunctionFormat"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimOutJunctionFormat"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/chimOutType/chimOutType",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/Junctions SeparateSAMold WithinBAM SoftClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/Junctions",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/SeparateSAMold",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/WithinBAM SoftClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/WithinBAM HardClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/Junctions SeparateSAMold",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/Junctions WithinBAM SoftClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/Junctions WithinBAM HardClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/Junctions SeparateSAMold WithinBAM HardClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/SeparateSAMold WithinBAM SoftClip",
                                "#star_2.7.10a_align.cwl/chimOutType/chimOutType/SeparateSAMold WithinBAM HardClip"
                            ]
                        }
                    ],
                    "default": "Junctions SeparateSAMold WithinBAM SoftClip",
                    "doc": "type of chimeric output. Args are additive, and defined as such - Junctions: Chimeric.out.junction. SeparateSAMold: output old SAM into separate Chimeric.out.sam file WithinBAM: output into main aligned BAM files (Aligned.*.bam). WithinBAM HardClip: hard-clipping in the CIGAR for supplemental chimeric alignments WithinBAM SoftClip:soft-clipping in the CIGAR for supplemental chimeric alignments",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimOutType",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/chimOutType"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 20,
                    "doc": "max drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length. AR recommends 30",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimScoreDropMax"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimScoreDropMax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": -1,
                    "doc": "penalty for a non-GT/AG chimeric junction. default -1, SF recommends -4, AR -1",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimScoreJunctionNonGTAG"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimScoreJunctionNonGTAG"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 10,
                    "doc": "int>=0: minimum difference (separation) between the best chimeric score and the next one. AR recommends 1",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimScoreSeparation"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimScoreSeparation"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 12,
                    "doc": "minimum length of chimeric segment length, if ==0, no chimeric output. REQUIRED for SF, 12 is their default, AR recommends 10",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimSegmentMin"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimSegmentMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "doc": "maximum gap in the read sequence between chimeric segments. AR recommends 3",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--chimSegmentReadGapMax"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimSegmentReadGapMax"
                },
                {
                    "type": "File",
                    "doc": "Tar gzipped reference that will be unzipped at run time",
                    "id": "#star_2.7.10a_align.cwl/genomeDir"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/genomeLoad/genomeLoad",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/genomeLoad/genomeLoad/NoSharedMemory",
                                "#star_2.7.10a_align.cwl/genomeLoad/genomeLoad/LoadAndKeep",
                                "#star_2.7.10a_align.cwl/genomeLoad/genomeLoad/LoadAndRemove",
                                "#star_2.7.10a_align.cwl/genomeLoad/genomeLoad/LoadAndExit"
                            ]
                        }
                    ],
                    "default": "NoSharedMemory",
                    "doc": "mode of shared memory usage for the genome file. In this context, the default value makes the most sense, the others are their as a courtesy.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--genomeLoad",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/genomeLoad"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1200000,
                    "doc": "maximum number of junction to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--limitSjdbInsertNsj"
                    },
                    "id": "#star_2.7.10a_align.cwl/limitSjdbInsertNsj"
                },
                {
                    "type": "string",
                    "doc": "output files name prefix (including full or relative path). Can only be defined on the command line. Tool will add '.' after prefix to easily delineate between file name and suffix",
                    "id": "#star_2.7.10a_align.cwl/outFileNamePrefix"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/outFilterIntronMotifs/outFilterIntronMotifs",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/outFilterIntronMotifs/outFilterIntronMotifs/None",
                                "#star_2.7.10a_align.cwl/outFilterIntronMotifs/outFilterIntronMotifs/RemoveNoncanonical",
                                "#star_2.7.10a_align.cwl/outFilterIntronMotifs/outFilterIntronMotifs/RemoveNoncanonicalUnannotated"
                            ]
                        }
                    ],
                    "default": "None",
                    "doc": "filter alignment using their motifs. None (default): no filtering. RemoveNoncanonical: filter out alignments that contain non-canonical junctions RemoveNoncanonicalUnannotated: filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterIntronMotifs",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterIntronMotifs"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.33,
                    "doc": "alignment will be output only if the number of matched bases is higher than or equal to this value., normalized to the read length (sum of mates' lengths for paired-end reads)",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterMatchNminOverLread"
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterMatchNminOverLread"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 999,
                    "doc": "maximum number of mismatches per pair, large number switches off this filter",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterMismatchNmax"
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterMismatchNmax"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.1,
                    "doc": "alignment will be output only if its ratio of mismatches to *mapped* length is less than or equal to this value",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterMismatchNoverLmax"
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterMismatchNoverLmax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 20,
                    "doc": "max number of multiple alignments allowed for a read: if exceeded, the read is considered unmapped. ENCODE value is default. AR recommends 50",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterMultimapNmax"
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterMultimapNmax"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.33,
                    "doc": "alignment will be output only if its score is higher than or equal to this value, normalized to read length (sum of mate's lengths for paired-end reads)",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterScoreMinOverLread"
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterScoreMinOverLread"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/outFilterType/outFilterType",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/outFilterType/outFilterType/BySJout",
                                "#star_2.7.10a_align.cwl/outFilterType/outFilterType/Normal"
                            ]
                        }
                    ],
                    "default": "BySJout",
                    "doc": "type of filtering. Normal: standard filtering using only current alignment. BySJout (default): keep only those reads that contain junctions that passed filtering into SJ.out.tab.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outFilterType",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outFilterType"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/outReadsUnmapped/outReadsUnmapped",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/outReadsUnmapped/outReadsUnmapped/None",
                                "#star_2.7.10a_align.cwl/outReadsUnmapped/outReadsUnmapped/Fastx"
                            ]
                        }
                    ],
                    "default": "None",
                    "doc": "output of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). none (default): no output. Fastx: output in separate fasta/fastq files, Unmapped.out.mate1/2.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outReadsUnmapped",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outReadsUnmapped"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "NH HI AS nM NM ch",
                    "doc": "a string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Please refer to the STAR manual, as there are numerous combinations: https://raw.githubusercontent.com/alexdobin/STAR/master/doc/STARmanual.pdf",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outSAMattributes",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outSAMattributes"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/outSAMstrandField/outSAMstrandField",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/outSAMstrandField/outSAMstrandField/intronMotif",
                                "#star_2.7.10a_align.cwl/outSAMstrandField/outSAMstrandField/None"
                            ]
                        }
                    ],
                    "default": "intronMotif",
                    "doc": "Cufflinks-like strand field flag. None: not used. intronMotif (default): strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outSAMstrandField",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outSAMstrandField"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/outSAMtype/outSAMtype",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/outSAMtype/outSAMtype/BAM Unsorted",
                                "#star_2.7.10a_align.cwl/outSAMtype/outSAMtype/None",
                                "#star_2.7.10a_align.cwl/outSAMtype/outSAMtype/BAM SortedByCoordinate",
                                "#star_2.7.10a_align.cwl/outSAMtype/outSAMtype/SAM Unsorted",
                                "#star_2.7.10a_align.cwl/outSAMtype/outSAMtype/SAM SortedByCoordinate"
                            ]
                        }
                    ],
                    "default": "BAM Unsorted",
                    "doc": "type of SAM/BAM output. None: no SAM/BAM output. Otherwise, first word is output type (BAM or SAM), second is sort type (Unsorted or SortedByCoordinate)",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outSAMtype",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outSAMtype"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/outSAMunmapped/outSAMunmapped",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/outSAMunmapped/outSAMunmapped/Within",
                                "#star_2.7.10a_align.cwl/outSAMunmapped/outSAMunmapped/None",
                                "#star_2.7.10a_align.cwl/outSAMunmapped/outSAMunmapped/Within KeepPairs"
                            ]
                        }
                    ],
                    "default": "Within",
                    "doc": "output of unmapped reads in the SAM format. None: no output. Within (default): output unmapped reads within the main SAM file (i.e. Aligned.out.sam) Within KeepPairs: record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--outSAMunmapped",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/outSAMunmapped"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.01,
                    "doc": "maximum proportion of mismatched bases in the overlap area. SF recommends 0.1",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--peOverlapMMp"
                    },
                    "id": "#star_2.7.10a_align.cwl/peOverlapMMp"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "doc": "minimum number of overlap bases to trigger mates merging and realignment. Specify >0 value to switch on the 'merging of overlapping mates'algorithm. SF recommends 12,  AR recommends 10",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--peOverlapNbasesMin"
                    },
                    "id": "#star_2.7.10a_align.cwl/peOverlapNbasesMin"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/quantMode/quantMode",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/quantMode/quantMode/TranscriptomeSAM GeneCounts",
                                "#star_2.7.10a_align.cwl/quantMode/quantMode/-",
                                "#star_2.7.10a_align.cwl/quantMode/quantMode/TranscriptomeSAM",
                                "#star_2.7.10a_align.cwl/quantMode/quantMode/GeneCounts"
                            ]
                        }
                    ],
                    "default": "TranscriptomeSAM GeneCounts",
                    "doc": "types of quantification requested. -: none. TranscriptomeSAM: output SAM/BAM alignments to transcriptome into a separate file GeneCounts: count reads per gene. Choices are additive, so default is 'TranscriptomeSAM GeneCounts'",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--quantMode",
                        "shellQuote": false
                    },
                    "id": "#star_2.7.10a_align.cwl/quantMode"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#reads_record_type.yml/reads_record"
                    },
                    "id": "#star_2.7.10a_align.cwl/reads_records"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 16,
                    "doc": "Adjust this value to change number of cores used.",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--runThreadN"
                    },
                    "id": "#star_2.7.10a_align.cwl/runThreadN"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#star_2.7.10a_align.cwl/twopassMode/twopassMode",
                            "symbols": [
                                "#star_2.7.10a_align.cwl/twopassMode/twopassMode/Basic",
                                "#star_2.7.10a_align.cwl/twopassMode/twopassMode/None"
                            ]
                        }
                    ],
                    "default": "Basic",
                    "doc": "Enable two pass mode to detect novel splice events. Default is basic (on).",
                    "inputBinding": {
                        "position": 3,
                        "prefix": "--twopassMode"
                    },
                    "id": "#star_2.7.10a_align.cwl/twopassMode"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "doc": "Chimeric junctions output file. May be used for downstream tools for fusion analysis",
                    "outputBinding": {
                        "glob": "*Chimeric.out.junction"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimeric_junctions"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "Deprecated output. Incompatible with certain options, has chimeric read alignments",
                    "outputBinding": {
                        "glob": "*Chimeric.out.sam"
                    },
                    "id": "#star_2.7.10a_align.cwl/chimeric_sam_out"
                },
                {
                    "type": "File",
                    "doc": "STAR-generated read counts by gene",
                    "outputBinding": {
                        "glob": "*ReadsPerGene.out.tab.gz"
                    },
                    "id": "#star_2.7.10a_align.cwl/gene_counts"
                },
                {
                    "type": "File",
                    "doc": "UNSORTED read mapping to genomic coordinates",
                    "outputBinding": {
                        "glob": "*Aligned.out.bam"
                    },
                    "id": "#star_2.7.10a_align.cwl/genomic_bam_out"
                },
                {
                    "type": "File",
                    "doc": "high confidence collapsed splice junctions in tab-delimited form",
                    "outputBinding": {
                        "glob": "*SJ.out.tab.gz"
                    },
                    "id": "#star_2.7.10a_align.cwl/junctions_out"
                },
                {
                    "type": "File",
                    "doc": "Overall summary of read mapping statistics",
                    "outputBinding": {
                        "glob": "*Log.final.out"
                    },
                    "id": "#star_2.7.10a_align.cwl/log_final_out"
                },
                {
                    "type": "File",
                    "doc": "Contains a summary of all params used and reference files",
                    "outputBinding": {
                        "glob": "*Log.out"
                    },
                    "id": "#star_2.7.10a_align.cwl/log_out"
                },
                {
                    "type": "File",
                    "doc": "Simple progress output. Can use to gauge speed and run time",
                    "outputBinding": {
                        "glob": "*Log.progress.out"
                    },
                    "id": "#star_2.7.10a_align.cwl/log_progress_out"
                },
                {
                    "type": "File",
                    "doc": "Reads manifest file processed by STAR.",
                    "outputBinding": {
                        "glob": "reads_manifest.tsv"
                    },
                    "id": "#star_2.7.10a_align.cwl/reads_manifest"
                },
                {
                    "type": "File",
                    "doc": "Read mapping to transcriptome",
                    "outputBinding": {
                        "glob": "*Aligned.toTranscriptome.out.bam"
                    },
                    "id": "#star_2.7.10a_align.cwl/transcriptome_bam_out"
                }
            ],
            "hints": [
                {
                    "class": "https://sevenbridges.comSaveLogs",
                    "value": "reads_manifest.tsv"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#star_fusion_1.10.1_call.cwl",
            "label": "STAR-Fusion Caller v1.10.1",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/star:fusion-1.10.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.cores)",
                    "ramMin": 64000
                }
            ],
            "baseCommand": [
                "tar",
                "-I pigz",
                "-xf"
            ],
            "arguments": [
                {
                    "position": 2,
                    "shellQuote": false,
                    "valueFrom": "&& /usr/local/STAR-Fusion/STAR-Fusion --genome_lib_dir ./$(inputs.genome_untar_path) --output_dir STAR-Fusion_outdir"
                },
                {
                    "position": 3,
                    "shellQuote": false,
                    "valueFrom": "&& mv STAR-Fusion_outdir/star-fusion.fusion_predictions.abridged.coding_effect.tsv $(inputs.output_basename).STAR-1.10.1.fusion_predictions.abridged.coding_effect.tsv && ${\n  var cmd = \"echo skipping compression of junctions file\";\n  if (inputs.compress_chimeric_junction){\n     cmd = \"pigz -c \" + inputs.Chimeric_junction.path + \" > \" + inputs.Chimeric_junction.basename + \".gz\";\n  }\n  return cmd;\n}"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "Output junction file from STAR",
                    "inputBinding": {
                        "prefix": "-J",
                        "position": 2
                    },
                    "id": "#star_fusion_1.10.1_call.cwl/Chimeric_junction"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "If part of a workflow, recommend compressing this file as final output",
                    "id": "#star_fusion_1.10.1_call.cwl/compress_chimeric_junction"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num cpus to use, >16 has diminishing returns",
                    "default": 16,
                    "inputBinding": {
                        "prefix": "--CPU",
                        "position": 2
                    },
                    "id": "#star_fusion_1.10.1_call.cwl/cores"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "Flag to activate examining coding effect. Use null to skip",
                    "default": "--examine_coding_effect",
                    "inputBinding": {
                        "position": 2
                    },
                    "id": "#star_fusion_1.10.1_call.cwl/examine_coding_effect"
                },
                {
                    "type": "File",
                    "doc": "CTAT library, either downloaded or generated through an arduous process",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#star_fusion_1.10.1_call.cwl/genome_tar"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "This is what the path will be when genome_tar is unpacked",
                    "default": "GRCh38_v38_CTAT_lib_Mar072022.CUSTOM",
                    "id": "#star_fusion_1.10.1_call.cwl/genome_untar_path"
                },
                {
                    "type": "string",
                    "id": "#star_fusion_1.10.1_call.cwl/output_basename"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*.fusion_predictions.abridged.coding_effect.tsv"
                    },
                    "id": "#star_fusion_1.10.1_call.cwl/abridged_coding"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "$(inputs.Chimeric_junction.basename).gz"
                    },
                    "id": "#star_fusion_1.10.1_call.cwl/chimeric_junction_compressed"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#supplemental_tar_gz.cwl",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/ubuntu:18.04"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 4,
                    "ramMin": 8000
                }
            ],
            "baseCommand": [
                "mkdir"
            ],
            "arguments": [
                {
                    "position": 1,
                    "shellQuote": false,
                    "valueFrom": "$(inputs.outFileNamePrefix)_RNASeQC_counts\ncp $(inputs.Gene_TPM.path) $(inputs.Gene_count.path) $(inputs.Exon_count.path) $(inputs.outFileNamePrefix)_RNASeQC_counts\ntar -czf $(inputs.outFileNamePrefix).RNASeQC.counts.tar.gz $(inputs.outFileNamePrefix)_RNASeQC_counts"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#supplemental_tar_gz.cwl/Exon_count"
                },
                {
                    "type": "File",
                    "id": "#supplemental_tar_gz.cwl/Gene_TPM"
                },
                {
                    "type": "File",
                    "id": "#supplemental_tar_gz.cwl/Gene_count"
                },
                {
                    "type": "string",
                    "id": "#supplemental_tar_gz.cwl/outFileNamePrefix"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.outFileNamePrefix).RNASeQC.counts.tar.gz"
                    },
                    "id": "#supplemental_tar_gz.cwl/RNASeQC_counts"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#t1k.cwl",
            "doc": "Run T1K genotyper 'The ONE genotyper for Kir and HLA'",
            "requirements": [
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "ramMin": "$(inputs.ram * 1000)",
                    "coresMin": "$(inputs.threads)"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "pgc-images.sbgenomics.com/d3b-bixu/t1k:v1.0.5"
                }
            ],
            "baseCommand": [],
            "arguments": [
                {
                    "position": 0,
                    "shellQuote": false,
                    "valueFrom": "$(inputs.cram_reference != null && inputs.bam != null && inputs.bam.basename.search(/.cram$/) != -1 ? \"perl /opt/seq_cache_populate.pl -root .cache/hts-ref \" + inputs.cram_reference.path + \" && export REF_CACHE=.cache/hts-ref/%2s/%2s/%s &&\" : \"\")"
                },
                {
                    "position": 10,
                    "shellQuote": false,
                    "valueFrom": "run-t1k"
                },
                {
                    "position": 20,
                    "shellQuote": false,
                    "valueFrom": "&& sed -i '1s/^/gene_name\\tnum_diff_alleles\\tallele_1\\tabundance_1\\tquality_1\\tallele_2\\tabundance_2\\tquality_2\\tsecondary_alleles\\n/' *_genotype.tsv"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--abnormalUnmapFlag"
                    },
                    "doc": "Set if the flag in BAM for the unmapped read-pair is nonconcordant",
                    "id": "#t1k.cwl/abnormal_unmap_flag"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--alleleDelimiter"
                    },
                    "doc": "the delimiter character for digit unit",
                    "id": "#t1k.cwl/allele_delimiter"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--alleleDigitUnits"
                    },
                    "doc": "the number of units in genotyping result",
                    "id": "#t1k.cwl/allele_digit_units"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--alleleWhitelist"
                    },
                    "doc": "only consider read aligned to the listed allele series",
                    "id": "#t1k.cwl/allele_whitelist"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".bai",
                            "required": false
                        },
                        {
                            "pattern": "^.bai",
                            "required": false
                        },
                        {
                            "pattern": ".crai",
                            "required": false
                        },
                        {
                            "pattern": "^.crai",
                            "required": false
                        }
                    ],
                    "doc": "Indexed BAM/CRAM/SAM input",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-b"
                    },
                    "id": "#t1k.cwl/bam"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--barcode"
                    },
                    "doc": "For BAM/-b inputs, name of field for barcode",
                    "id": "#t1k.cwl/barcode_bam"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--barcode"
                    },
                    "doc": "For -1 -2/-u inputs, file containing barcodes",
                    "id": "#t1k.cwl/barcode_fastq"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--barcodeRange"
                    },
                    "doc": "start, end(-1 for length-1), strand in a barcode is the true barcode. Format: INT INT CHAR (e.g.: 0 -1 +)",
                    "id": "#t1k.cwl/barcode_range"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--barcodeWhitelist"
                    },
                    "doc": "barcode whitelist file",
                    "id": "#t1k.cwl/barcode_whitelist"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--cov"
                    },
                    "doc": "filter genes with average coverage less than the specified value",
                    "id": "#t1k.cwl/cov"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": true
                        }
                    ],
                    "doc": "FAI-indexed FASTA file used to compress CRAM input.",
                    "id": "#t1k.cwl/cram_reference"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--crossGeneRate"
                    },
                    "doc": "the effect from other gene's expression",
                    "id": "#t1k.cwl/cross_gene_rate"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--frac"
                    },
                    "doc": "filter if abundance is less than the frac of dominant allele",
                    "id": "#t1k.cwl/frac"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-c"
                    },
                    "doc": "gene coordinate file (required when providing BAM/-b input)",
                    "id": "#t1k.cwl/gene_coordinates"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "fastq reads if interleaved",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-i"
                    },
                    "id": "#t1k.cwl/interleaved"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--mateIdSuffixLen"
                    },
                    "doc": "the suffix length in read id for mate",
                    "id": "#t1k.cwl/mate_id_suffix_len"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "mates (read2) fastq reads if paired-end",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-2"
                    },
                    "id": "#t1k.cwl/mates"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-s"
                    },
                    "doc": "minimum alignment similarity",
                    "id": "#t1k.cwl/min_align_sim"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--noExtraction"
                    },
                    "doc": "Set to directly use the files from provided -1 -2/-u for genotyping thus skipping extraction",
                    "id": "#t1k.cwl/no_extraction"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "Prefix string for output file names. Default inferred from input",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-o"
                    },
                    "id": "#t1k.cwl/output_basename"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--outputReadAssignment"
                    },
                    "doc": "Set to output the allele assignment for each read to prefix_assign.tsv file",
                    "id": "#t1k.cwl/output_read_assignment"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#t1k.cwl/preset/preset",
                            "symbols": [
                                "#t1k.cwl/preset/preset/hla",
                                "#t1k.cwl/preset/preset/hla-wgs",
                                "#t1k.cwl/preset/preset/kir-wgs",
                                "#t1k.cwl/preset/preset/kir-wes"
                            ]
                        }
                    ],
                    "default": "hla",
                    "doc": "If paired-end, read orientation",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--preset"
                    },
                    "id": "#t1k.cwl/preset"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num GB memory to make available",
                    "default": 32,
                    "id": "#t1k.cwl/ram"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--read1Range"
                    },
                    "doc": "start, end(-1 for length-1) in -1/-u files for genomic sequence. Format: INT INT (e.g.: 0 -1)",
                    "id": "#t1k.cwl/read1_range"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--read2Range"
                    },
                    "doc": "start, end(-1 for length-1) in -2 files for genomic sequence. Format: INT INT (e.g.: 0 -1)",
                    "id": "#t1k.cwl/read2_range"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "read1 fastq reads if paired-end",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-1"
                    },
                    "id": "#t1k.cwl/reads"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-f"
                    },
                    "doc": "reference sequence file",
                    "id": "#t1k.cwl/reference"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--relaxIntronAlign"
                    },
                    "doc": "Set to allow one more mismatch in intronic alignment",
                    "id": "#t1k.cwl/relax_intron_align"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "fastq reads if single-end",
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-u"
                    },
                    "id": "#t1k.cwl/single_end"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--skipPostAnalysis"
                    },
                    "doc": "Set to skip post analysis and only conduct genotyping",
                    "id": "#t1k.cwl/skip_post_analysis"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#t1k.cwl/stage/stage",
                            "symbols": [
                                "#t1k.cwl/stage/stage/0",
                                "#t1k.cwl/stage/stage/1",
                                "#t1k.cwl/stage/stage/2"
                            ]
                        }
                    ],
                    "inputBinding": {
                        "position": 12,
                        "prefix": "--stage"
                    },
                    "doc": "start genotyping on specified stage; 0: start from beginning (candidate read extraction). 1: start from genotype with candidate reads. 2: start from post analysis",
                    "id": "#t1k.cwl/stage"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num processing threads to use",
                    "default": 8,
                    "inputBinding": {
                        "position": 12,
                        "prefix": "-t"
                    },
                    "id": "#t1k.cwl/threads"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_aligned_*.fa"
                    },
                    "id": "#t1k.cwl/aligned_fasta"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*_allele.tsv"
                    },
                    "id": "#t1k.cwl/allele_tsv"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*_allele.vcf"
                    },
                    "id": "#t1k.cwl/allele_vcf"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_candidate_*.fq"
                    },
                    "id": "#t1k.cwl/candidate_fastqs"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*_genotype.tsv"
                    },
                    "id": "#t1k.cwl/genotype_tsv"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "*_assign.tsv"
                    },
                    "id": "#t1k.cwl/read_assignments"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#main",
            "label": "Kids First DRC RNAseq Workflow",
            "doc": "# Kids First RNA-Seq Workflow V4\n\nThis is the Kids First RNA-Seq pipeline, which calculates gene and transcript isoform expression, detects fusions and splice junctions.\nWe have transitioned to this current version which upgrades several software components.\nOur legacy workflow is still available as [v3.0.1](https://github.com/kids-first/kf-rnaseq-workflow/tree/v3.0.1), and on CAVATICA, [revision 8](https://cavatica.sbgenomics.com/public/apps/cavatica/apps-publisher/kfdrc-rnaseq-workflow/8)\n\n<p align=\"center\">\n  <img src=\"docs/kids_first_logo.svg\" alt=\"Kids First repository logo\" width=\"660px\" />\n</p>\n<p align=\"center\">\n  <a href=\"https://github.com/kids-first/kf-rnaseq-workflow/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/kids-first/kf-rnaseq-workflow.svg?style=for-the-badge\"></a>\n</p>\n\n## Introduction\nThis pipeline has an optional Cutadapt to trim adapters from the raw reads, alignment-to-FASTQ conversion if necessary, and passes the reads to STAR for alignment.\nThe alignment output is used by RSEM for gene expression abundance estimation and rMATS for differential alternative splicing events detection.\nAdditionally, Kallisto is used for quantification, but uses pseudoalignments to estimate the gene abundance from the raw data.\nFusion calling is performed using Arriba and STAR-Fusion detection tools on the STAR alignment outputs.\nFiltering and prioritization of fusion calls is done by annoFuse.\nMetrics for the workflow are generated by RNA-SeQC.\nJunction files for the workflow are generated by rMATS.\n\nIf you would like to run this workflow using the CAVATICA public app, a basic primer on running public apps can be found [here](https://www.notion.so/d3b/Starting-From-Scratch-Running-Cavatica-af5ebb78c38a4f3190e32e67b4ce12bb).\nAlternatively, if you would like to run it locally using `cwltool`, a basic primer on that can be found [here](https://www.notion.so/d3b/Starting-From-Scratch-Running-CWLtool-b8dbbde2dc7742e4aff290b0a878344d) and combined with app-specific info from the readme below.\nThis workflow is the current production workflow, equivalent to this [CAVATICA public app](https://cavatica.sbgenomics.com/public/apps#cavatica/apps-publisher/kfdrc-rnaseq-workflow).\n\n### Cutadapt\nCutadapt v3.4: Cut adapter sequences from raw reads if needed.\n- [Github](https://github.com/marcelm/cutadapt)\n- [Publication](https://doi.org/10.14806/ej.17.1.200)\n### STAR\nSTAR v2.7.10a: RNA-Seq raw data alignment.\n- [Github](https://github.com/alexdobin/STAR/tree/2.7.10a)\n- [Publication](https://doi.org/f4h523)\n- [README](docs/STAR_2.7.10a.md)\n### RSEM\nRSEM v1.3.1: Calculation of gene expression.\n- [Github](https://github.com/deweylab/RSEM/tree/v1.3.1)\n- [Publication](https://doi.org/10.1186/1471-2105-12-323)\n- [README](docs/RSEM_1.3.1.md)\n### Kallisto\nKallisto v0.43.1: Raw data pseudoalignment to estimate gene abundance.\n- [Github](https://github.com/pachterlab/kallisto/tree/v0.43.1)\n- [Publication](https://doi.org/10.1038/nbt.3519)\n### STAR-Fusion\nSTAR-Fusion v1.10.1: Fusion detection for `STAR` chimeric reads.\n- [Github](https://github.com/STAR-Fusion/STAR-Fusion/tree/STAR-Fusion-v1.10.1)\n- [Publication](https://doi.org/10.1101/120295)\n- [README](docs/STAR-Fusion_1.10.1.md)\n### Arriba\nArriba v2.2.1 Fusion caller that uses `STAR` aligned reads and chimeric reads output.\n- [Github](https://github.com/suhrig/arriba)\n- [Publication](https://doi.org/10.1101/gr.257246.119)\n- [README](docs/ARRIBA_2.2.1.md)\n### annoFuse\nannoFuse 0.92.0 Filter and prioritize fusion calls.\n- [Github](https://github.com/d3b-center/annoFuse/releases/tag/v0.92.0)\n- [Publication](https://www.biorxiv.org/content/10.1101/839738v3)\n- [README](docs/D3B_ANNOFUSE.md)\n### RNA-SeQC\nRNA-SeQC v2.3.4 Generate metrics such as gene and transcript counts, sense/antisense mapping, mapping rates, etc.\n- [Github](https://github.com/broadinstitute/rnaseqc)\n- [Publication](https://doi.org/10.1093/bioinformatics/btab135)\n### rMATS\nrMATS turbo v4.1.2 Computational tool to detect differential alternative splicing events from RNA-Seq data.\n- [Github](https://github.com/Xinglab/rmats-turbo)\n- [Publication](https://doi.org/10.1038/s41596-023-00944-2)\n- [README](docs/D3B_RMATS.md)\n### T1k\nT1k v1.0.5 Genotype highly polymorphic genes (e.g. HLA) with bulk RNA-seq data.\n- [Github](https://github.com/mourisl/T1K)\n- [Publication](https://doi.org/10.1101/gr.277585.122)\n- [README](docs/T1K_README.md)\n\n## Usage\n\n### Runtime Estimates:\nBased on a test set of five input BAMs, CAVATICA compute and storage estimates:\n - Typical 2 hour run time, 10 hours is a higher end possibility\n - Cost:\n   - Pure spot instances with no terminations: $2.37 mean\n   - Pure on-demand: $5.19 mean\n   - Warning: If spot instance kill rate is high, especially for `c5.9xlarge` instance type, the cost could end up greater than on-demand\n - Storage:\n   - Total output size 6GB mean\n   - Storage estimate ~ $0.14 per month\n\n## Inputs\n\n### Reads Lists\n\nReads can be provided in both aligned/unaligned SAM/BAM/CRAM and FASTQ/FASTQ.GZ.\nThese reads are provided through a series of lists:\n- `input_alignment_reads`\n- `input_pe_reads`\n- `input_pe_mates`\n- `input_se_reads`\n\nAll SAM/BAM/CRAM files should be provided via the `input_alignment_reads` input.\nAll single end FASTQ files should be provided via the `input_se_reads` input.\nFor paired end FASTQ files:\n- Provide the R1 FASTQ files via the `input_pe_reads` input\n- Provide the R2 FASTQ files via the `input_pe_mates` input\n- Warning! These lists need to be in the same order! The first file in the `input_pe_reads` list should be the pair of the first file of the `input_pe_mates` list, and so on!\n\n### Read Group Strings and Additional Read Metadata\n\nUsers are encouraged to provide read group strings that correspond to their reads\nfiles. For `input_alignment_reads` inputs, this workflow uses the read groups already\npresent in the SAM/BAM/CRAM header. The only exception to this is that the sample id\n`SM` will be updated to whatever `sample_name` the user provides the workflow.\n\nUsers can also provide some strandedness and paired information:\n- `is_paired_end`: Are the reads paired end?\n- `wf_strand_param`: Describe the strandedness of the input data. 'default' for unstranded/auto, 'rf-stranded' if read1 in the FASTQ read pairs is reverse complement to the transcript, 'fr-stranded' if read1 same sense as transcript\n\nIf the user does not provide these values, the workflow will attempt to auto-detect\nthe values. Sometimes the software is incapable of making a determination. If the\nuser does not provide the value and the workflow is unable to guess the value, the\nworkflow will fail. Please check the error message to see the cause of the failure\nand provide the necessary value.\n\nUsers should also provide any adapter information to the workflow. This information includes:\n- `r1_adapter`: If the R1 reads still have adapters, supply the adapter sequence here\n- `r2_adapter`: If the R2 reads still have adapters, supply the adapter sequence here\n- `min_len`: If trimming adapters, what is the minimum length reads should have post trimming\n- `quality_base`: Phred scale used for quality scores of the reads\n- `quality_cutoff`: Quality trim cutoff, see https://cutadapt.readthedocs.io/en/v3.4/guide.html#quality-trimming for how 5' 3' is handled\n\nAt this time the workflow only accepts a single input for these options. If you\nhave multiple read groups with unique trimming needs, we recommend pre-trimming\nthe reads before running the workflow.\n\nThe workflow is designed to handle multiple read groups; however, not all tools\nare capable of handling a mix of single and paired end inputs.\n\n### samtools fastq\n\nWhen providing one ore more `input_alignment_reads` inputs:\n- `samtools_fastq_cores`: Cores for samtools fastq conversion\n- `cram_reference`: If input is CRAM, provide the reference FASTA used to build the CRAM\n\nAt this time the workflow only accepts a single input for `cram_reference`. If\nyou have multiple CRAMs with different references, we recommend manually\nconverting them to BAM before running the workflow.\n\n### STAR Align\n\nSTAR Align has many options available to the user at runtime. For the most part\nusers can leave these fields default. Kids First favors setting/overriding\ndefaults with \"arriba-heavy\" specified in [STAR docs](docs/STAR_2.7.10a.md),\nhowever if it is not a tumor sample, then GTEx is preferred. Here are all of\nthe available options for STAR:\n- `STARgenome`: TAR gzipped reference that will be unzipped at run time\n- `runThreadN`: Adjust this value to change number of cores used.\n- `twopassMode`: Enable two pass mode to detect novel splice events. Default is basic (on).\n- `alignSJoverhangMin`: minimum overhang for unannotated junctions. ENCODE default used.\n- `outFilterMismatchNoverLmax`: alignment will be output only if its ratio of mismatches to *mapped* length is less than or equal to this value\n- `outFilterType`: type of filtering. Normal: standard filtering using only current alignment. BySJout (default): keep only those reads that contain junctions that passed filtering into SJ.out.tab.\n- `outFilterScoreMinOverLread`: alignment will be output only if its score is higher than or equal to this value, normalized to read length (sum of mate's lengths for paired-end reads)\n- `outFilterMatchNminOverLread`: alignment will be output only if the number of matched bases is higher than or equal to this value., normalized to the read length (sum of mates' lengths for paired-end reads)\n- `outReadsUnmapped`: output of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). none (default): no output. Fastx: output in separate FASTA/FASTQ files, Unmapped.out.mate1/2.\n- `limitSjdbInsertNsj`: maximum number of junction to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run\n- `outSAMstrandField`: Cufflinks-like strand field flag. None: not used. intronMotif (default): strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.\n- `outFilterIntronMotifs`: filter alignment using their motifs. None (default): no filtering. RemoveNoncanonical: filter out alignments that contain non-canonical junctions RemoveNoncanonicalUnannotated: filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.\n- `alignSoftClipAtReferenceEnds`: allow the soft-clipping of the alignments past the end of the chromosomes. Yes (default): allow. No: prohibit, useful for compatibility with Cufflinks\n- `quantMode`: types of quantification requested. -: none. TranscriptomeSAM: output SAM/BAM alignments to transcriptome into a separate file GeneCounts: count reads per gene. Choices are additive, so default is 'TranscriptomeSAM GeneCounts'\n- `outSAMtype`: type of SAM/BAM output. None: no SAM/BAM output. Otherwise, first word is output type (BAM or SAM), second is sort type (Unsorted or SortedByCoordinate)\n- `outSAMunmapped`: output of unmapped reads in the SAM format. None: no output. Within (default): output unmapped reads within the main SAM file (i.e. Aligned.out.sam) Within KeepPairs: record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads\n- `genomeLoad`: mode of shared memory usage for the genome file. In this context, the default value makes the most sense, the others are their as a courtesy.\n- `chimMainSegmentMultNmax`: maximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments\n- `outSAMattributes`: a string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Please refer to the STAR manual, as there are numerous combinations: https://raw.githubusercontent.com/alexdobin/star_2.7.10a/master/doc/STARmanual.pdf\n- `alignInsertionFlush`: how to flush ambiguous insertion positions. None (default): insertions not flushed. Right: insertions flushed to the right. STAR Fusion recommended (SF)\n- `alignIntronMax`: maximum intron size. SF recommends 100000\n- `alignMatesGapMax`: maximum genomic distance between mates, SF recommends 100000 to avoid readthru fusions within 100k\n- `alignSJDBoverhangMin`: minimum overhang for annotated junctions. SF recommends 10\n- `outFilterMismatchNmax`: maximum number of mismatches per pair, large number switches off this filter\n- `alignSJstitchMismatchNmax`: maximum number of mismatches for stitching of the splice junctions. Value '5 -1 5 5' improves SF chimeric junctions, also recommended by arriba (AR)\n- `alignSplicedMateMapLmin`: minimum mapped length for a read mate that is spliced. SF recommends 30\n- `alignSplicedMateMapLminOverLmate`: alignSplicedMateMapLmin normalized to mate length. SF recommends 0, AR 0.5\n- `chimJunctionOverhangMin`: minimum overhang for a chimeric junction. SF recommends 8, AR 10\n- `chimMultimapNmax`: maximum number of chimeric multi-alignments. SF recommends 20, AR 50.\n- `chimMultimapScoreRange`: the score range for multi-mapping chimeras below the best chimeric score. Only works with chimMultimapNmax > 1. SF recommends 3\n- `chimNonchimScoreDropMin`: int>=0: to trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value. SF recommends 10\n- `chimOutJunctionFormat`: formatting type for the Chimeric.out.junction file, value 1 REQUIRED for SF\n- `chimOutType`: type of chimeric output. Args are additive, and defined as such - Junctions: Chimeric.out.junction. SeparateSAMold: output old SAM into separate Chimeric.out.sam file WithinBAM: output into main aligned BAM files (Aligned.*.bam). WithinBAM HardClip: hard-clipping in the CIGAR for supplemental chimeric alignments WithinBAM SoftClip:soft-clipping in the CIGAR for supplemental chimeric alignments\n- `chimScoreDropMax`: max drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length. AR recommends 30\n- `chimScoreJunctionNonGTAG`: penalty for a non-GT/AG chimeric junction. default -1, SF recommends -4, AR -1\n- `chimScoreSeparation`: int>=0: minimum difference (separation) between the best chimeric score and the next one. AR recommends 1\n- `chimSegmentMin`: minimum length of chimeric segment length, if ==0, no chimeric output. REQUIRED for SF, 12 is their default, AR recommends 10\n- `chimSegmentReadGapMax`: maximum gap in the read sequence between chimeric segments. AR recommends 3\n- `outFilterMultimapNmax`: max number of multiple alignments allowed for a read: if exceeded, the read is considered unmapped. ENCODE value is default. AR recommends 50\n- `peOverlapMMp`: maximum proportion of mismatched bases in the overlap area. SF recommends 0.1\n- `peOverlapNbasesMin`: minimum number of overlap bases to trigger mates merging and realignment. Specify >0 value to switch on the 'merging of overlapping mates' algorithm. SF recommends 12,  AR recommends 10\n\nThese are the defaults set by the workflow:\n- `runThreadN`: 36\n- `twopassMode`: \"Basic\"\n- `alignSJoverhangMin`: 8\n- `outFilterMismatchNoverLmax`: 0.1\n- `outFilterType`: \"BySJout\"\n- `outFilterScoreMinOverLread`: 0.33\n- `outFilterMatchNminOverLread`: 0.33\n- `outReadsUnmapped`: \"None\"\n- `limitSjdbInsertNsj`: 1200000\n- `outSAMstrandField`: \"intronMotif\"\n- `outFilterIntronMotifs`: \"None\"\n- `alignSoftClipAtReferenceEnds`: \"Yes\"\n- `quantMode`: TranscriptomeSAM GeneCounts\n- `outSAMtype`: \"BAM Unsorted\"\n- `outSAMunmapped`: \"Within\"\n- `genomeLoad`: \"NoSharedMemory\"\n- `chimMainSegmentMultNmax`: 1\n- `outSAMattributes`: 'NH HI AS nM NM ch RG'\n- `alignInsertionFlush`: \"None\"\n- `alignIntronMax`: 1000000\n- `alignMatesGapMax`: 1000000\n- `alignSJDBoverhangMin`: 1\n- `outFilterMismatchNmax`: 999\n- `alignSJstitchMismatchNmax`: \"5 -1 5 5\"\n- `alignSplicedMateMapLmin`: 0\n- `alignSplicedMateMapLminOverLmate`: 0.5\n- `chimJunctionOverhangMin`: 10\n- `chimMultimapNmax`: 50\n- `chimMultimapScoreRange`: 1\n- `chimNonchimScoreDropMin`: 20\n- `chimOutJunctionFormat`: 1\n- `chimOutType`: \"Junctions WithinBAM SoftClip\"\n- `chimScoreDropMax`: 30\n- `chimScoreJunctionNonGTAG`: -1\n- `chimScoreSeparation`: 1\n- `chimSegmentMin`: 10\n- `chimSegmentReadGapMax`: 3\n- `outFilterMultimapNmax`: 50\n- `peOverlapMMp`: 0.01\n- `peOverlapNbasesMin`: 10\n\n### Arriba\n- `arriba_memory`: Mem intensive tool. Set in GB\n\n### STAR Fusion\n- `FusionGenome`: STAR-Fusion Cancer Transcriptome Analysis Toolkit (CTAT) Genome lib\n- `compress_chimeric_junction`: If part of a workflow, recommend compressing this file as final output\n\n### RNAseQC\n- `RNAseQC_GTF`: GTF file from `gtf_anno` that has been collapsed GTEx-style\n\n### kallisto\n- `kallisto_idx`: Specialized index of a **transcriptome** FASTA file for kallisto\n\n### RSEM:\n- `RSEMgenome`: RSEM reference tar ball\n- `estimate_rspd`: Set this option if you want to estimate the read start position distribution (RSPD) from data\n\n### annoFuse:\n- `sample_name`: Sample ID of the input reads. If not provided, will use reads1 file basename.\n- `annofuse_col_num`: 0-based column number in file of fusion name.\n- `fusion_annotator_ref`: Tar ball with fusion_annot_lib.idx and blast_pairs.idx from STAR-Fusion CTAT Genome lib. Can be same as FusionGenome, but only two files needed from that package\n\n### rmats\n- `rmats_variable_read_length`: Allow reads with lengths that differ from --readLength to be processed. --readLength will still be used to determine IncFormLen and SkipFormLen.\n- `rmats_novel_splice_sites`: Select for novel splice site detection or unannotated splice sites. 'true' to detect or add this parameter, 'false' to disable denovo detection. Tool Default: false\n- `rmats_stat_off`: Select to skip statistical analysis, either between two groups or on single sample group. 'true' to add this parameter. Tool default: false\n- `rmats_allow_clipping`: Allow alignments with soft or hard clipping to be used.\n- `rmats_threads`: Threads to allocate to RMATs.\n- `rmats_ram`: GB of RAM to allocate to RMATs.\n\n### T1k\n- `run_t1k`: Set to false to disable T1k HLA typing\n- `hla_rna_ref_seqs`: FASTA file containing the HLA allele reference sequences for RNA.\n- `hla_rna_gene_coords`: FASTA file containing the coordinates of the HLA genes for RNA.\n\n### Run:\n\n1. Reads inputs:\n   - For PE FASTQ input, please enter the reads 1 file in `reads1` and the reads 2 file in `reads2`.\n   - For SE FASTQ input, enter the single ends reads file in `reads1` and leave `reads2` empty as it is optional.\n   - For alignment input (SAM/BAM/CRAM), please enter the reads file in `reads1` and leave `reads2` empty as it is optional.\n2. `r1_adapter` and `r2_adapter` are OPTIONAL:\n   - If the input reads have already been trimmed, leave these as null and cutadapt step will simple pass on the FASTQ files to STAR.\n   - If they do need trimming, supply the adapters and the cutadapt step will trim, and pass trimmed FASTQs along.\n   - `min_len` if adapter is trimmed, currently set to min `20` bp. Change this as you see fit\n   - `quality_base` set to Phred scale `33` by default if trimming. There was a weird time when `64` was used - change if different\n   - `quality_cutoff` if adapter is trimmed and you want to set a min bp quality. A single value will apply to both paired ends, 2 values will allow you to assign a different one to each (unusual)\n3. `wf_strand_param` is now *optional* as the workflow will try to determine strandedness for you. Note: if the workflow fails to detect a strandedness, it will fail. If you would like to override autodetect, it is a workflow convenience param so that, if you input the following, the equivalent will propagate to the four tools that use that parameter:\n   - `default`: 'rsem_std': null, 'kallisto_std': null, 'rnaseqc_std': null, 'arriba_std': null. This means unstranded or auto in the case of arriba.\n   - `rf-stranded`: 'rsem_std': 0, 'kallisto_std': 'rf-stranded', 'rnaseqc_std': 'rf', 'arriba_std': 'reverse'.  This means if read1 in the input FASTQ/BAM is reverse complement to the transcript that it maps to.\n   - `fr-stranded`: 'rsem_std': 1, 'kallisto_std': 'fr-stranded', 'rnaseqc_std': 'fr', 'arriba_std': 'yes'. This means if read1 in the input FASTQ/BAM is the same sense (maps 5' to 3') to the transcript that it maps to.\n4. Suggested STAR `outSAMattrRGline` format is `ID:sample_name LB:aliquot_id   PL:platform SM:BSID`:\n   - For example, `ID:7316-242 LB:750189 PL:ILLUMINA SM:BS_W72364MN`\n   - These `KEY:VALUE` fields can be separated by either a whitespace or tab\n     character. Any unquoted whitespace will be automatically converted to a tab\n     value by STAR. If you wish to include whitespaces in your `VALUE`, you must put\n     double quotes around the `VALUE`. For example if you wanted a `DS` key with a\n     `I love read groups` value, the entry would look like: `ID:xxx DS:\"I love read\n     groups\"`. See the STAR documentation on `outSAMattrRGline` for complete details.\n5. Suggested REFERENCE inputs are:\n   - `reference_fasta`: [GRCh38.primary_assembly.genome.fa](https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/GRCh38.primary_assembly.genome.fa.gz), will need to unzip\n   - `gtf_anno`: [gencode.v39.primary_assembly.annotation.gtf](https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/gencode.v39.primary_assembly.annotation.gtf.gz), will need to unzip\n   - `FusionGenome`: GRCh38_v39_CTAT_lib_Mar242022.CUSTOM.tar.gz. A custom library built using instructions from (https://github.com/STAR-Fusion/STAR-Fusion/wiki/installing-star-fusion#preparing-the-genome-resource-lib), using GENCODE 39 reference.\n   - `RNAseQC_GTF`: gencode.v39.primary_assembly.rnaseqc.stranded.gtf OR gencode.v39.primary_assembly.rnaseqc.unstranded.gtf, built using `gtf_anno` and following build instructions [here](https://github.com/broadinstitute/rnaseqc#usage) and [here](https://github.com/broadinstitute/gtex-pipeline/tree/master/gene_model)\n   - `RSEMgenome`: RSEM_GENCODE39.tar.gz, built using the `reference_fasta` and `gtf_anno`, following `GENCODE` instructions from [here](https://deweylab.github.io/RSEM/README.html), then creating a tar ball of the results.\n   - `STARgenome`: STAR_2.7.10a_GENCODE39.tar.gz, created using the star_2.7.10a_genome_generate.cwl tool, using the `reference_fasta`, `gtf_anno`, and setting `sjdbOverhang` to 100\n   - `kallisto_idx`: RSEM_GENCODE39.transcripts.kallisto.idx, built from RSEM GENCODE 39 transcript fasts, in `RSEMgenome` tar ball, following instructions from [here](https://pachterlab.github.io/kallisto/manual)\n   - `hla_rna_ref_seqs`: hla_v3.43.0_gencode_v39_rna_seq.fa, created using https://github.com/mourisl/T1K/blob/master/t1k-build.pl with [hla.dat v3.43.0](http://ftp.ebi.ac.uk/pub/databases/ipd/imgt/hla/hla.dat) and [GENCODE v39 primary assembly GTF](https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/gencode.v39.primary_assembly.annotation.gtf.gz)\n   - `hla_rna_gene_coords`: hla_v3.43.0_gencode_v39_rna_coord.fa, created using https://github.com/mourisl/T1K/blob/master/t1k-build.pl with [hla.dat v3.43.0](http://ftp.ebi.ac.uk/pub/databases/ipd/imgt/hla/hla.dat) and [GENCODE v39 primary assembly GTF](https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_39/gencode.v39.primary_assembly.annotation.gtf.gz)\n6. rMATS requires the length of the reads in the sample. This workflow will attempt to estimate the read length based on a polling of reads. If the user wishes to override this value they can set `read_length_median` to their desired read length. Additionally, there is a `rmats_variable_read_length` boolean that users can set if their reads are not uniform in length. This workflow will poll the reads and set that value to true if it observes multiple read lengths. Like read length, user-provided input will override this guess.\n7. While `output_basename`, `sample_name`, and the `*rg_str` inputs are optional, it is strongly recommended that the user provide these values for data quality purposes. If the user does not provide these values, the basename of the reads1 file will be substituted in their place.\n   - `output_basename` and `sample_name` values will become `reads1.basename.split('.')[0]`\n   - The STAR align `outSAMattrRGline` value will become:\n      - For aligned reads inputs, we will use the RG line set in the BAM header (the `SM` value will be set to what we described above\n      - For FASTQ inputs, `ID:reads1.basename.split('.')[0]_1 LB:reads1.basename.split('.')[0] SM:reads1.basename.split('.')[0] PL:Illumina`\n   - Additionally for FASTQ inputs, if no `outSAMattrRGline` input is provided a disclaimer will be added to the `@RG` header line that reads: `DS:Values for this read group were auto-generated and may not reflect the true read group information.`\n\n## Outputs\n- `cutadapt_stats`: Cutadapt stats output, only if adapter is supplied.\n- `STAR_sorted_genomic_cram`: STAR sorted and indexed genomic alignment CRAM\n- `STAR_chimeric_junctions`: STAR chimeric junctions\n- `STAR_gene_count`: STAR genecounts\n- `STAR_junctions_out`: STARjunction reads\n- `STAR_final_log`: STAR metricslog file of unique, multi-mapping, unmapped, and chimeric reads\n- `STAR-Fusion_results`: STAR fusion detection from chimeric reads\n- `arriba_fusion_results`: Fusion output from Arriba\n- `arriba_fusion_viz`: pdf output from Arriba\n- `RSEM_isoform`: RSEM isoform expression estimates\n- `RSEM_gene`: RSEM gene expression estimates\n- `RNASeQC_Metrics`: Metrics on mapping, intronic, exonic rates, count information, etc\n- `RNASeQC_counts`: Contains gene tpm, gene read, and exon counts\n- `kallisto_Abundance`: Gene abundance output from STAR genomic BAM file\n- `annofuse_filtered_fusions_tsv`: Filtered fusions called by annoFuse.\n- `rmats_filtered_alternative_3_prime_splice_sites_jc`: Alternative 3 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n- `rmats_filtered_alternative_5_prime_splice_sites_jc`: Alternative 5 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n- `rmats_filtered_mutually_exclusive_exons_jc`: Mutually exclusive exons JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n- `rmats_filtered_retained_introns_jc`: Retained introns JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n- `rmats_filtered_skipped_exons_jc`: Skipped exons JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n- `t1k_genotype_tsv`: Genotyping results from T1k\n\n### Reference build notes\n - STAR-Fusion reference built with command `/usr/local/STAR-Fusion/ctat-genome-lib-builder/prep_genome_lib.pl --gtf gencode.v39.primary_assembly.annotation.gtf --annot_filter_rule ../AnnotFilterRule.pm --CPU 36 --fusion_annot_lib ../fusion_lib.Mar2021.dat.gz --genome_fa ../GRCh38.primary_assembly.genome.fa --output_dir GRCh38_v39_CTAT_lib_Mar242022.CUSTOM --human_gencode_filter --pfam_db current --dfam_db human 2> build.errs > build.out &`\n - fusion_annotator_ref built by placing GRCh38_v39_CTAT_lib_Mar242022.CUSTOM/fusion_annot_lib.idx and GRCh38_v39_CTAT_lib_Mar242022.CUSTOM/blast_pairs.idx into its own tar ball\n - kallisto index built using RSEM `RSEM_GENCODE39.transcripts.fa` file as transcriptome FASTA, using command: `kallisto index -i RSEM_GENCODE39.transcripts.kallisto.idx RSEM_GENCODE39.transcripts.fa`\n - RNA-SEQc reference built using [collapse GTF script](https://github.com/broadinstitute/gtex-pipeline/blob/master/gene_model/collapse_annotation.py)\n   - Two references needed if data are stranded vs. unstranded\n   - Flag `--collapse_only` used for stranded\n",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#reads_record_type.yml/reads_record"
                        }
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "https://platform.illumina.com/rdf/ica/resources:tier": "standard"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "STAR-Fusion CTAT Genome lib",
                    "id": "#FusionGenome",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62853e7ad63f7c6d8d7ae5a8",
                        "name": "#FusionGenome/GRCh38_v39_CTAT_lib_Mar242022.CUSTOM.tar.gz"
                    }
                },
                {
                    "type": "File",
                    "doc": "gtf file from `gtf_anno` that has been collapsed GTEx-style",
                    "id": "#RNAseQC_GTF",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62853e7ad63f7c6d8d7ae5a3",
                        "name": "#RNAseQC_GTF/gencode.v39.primary_assembly.rnaseqc.stranded.gtf"
                    }
                },
                {
                    "type": "File",
                    "doc": "RSEM reference tar ball",
                    "id": "#RSEMgenome",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62853e7ad63f7c6d8d7ae5a5",
                        "name": "#RSEMgenome/RSEM_GENCODE39.tar.gz"
                    }
                },
                {
                    "type": "File",
                    "doc": "Tar gzipped reference that will be unzipped at run time",
                    "id": "#STARgenome",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62853e7ad63f7c6d8d7ae5a7",
                        "name": "#STARgenome/STAR_2.7.10a_GENCODE39.tar.gz"
                    }
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#alignInsertionFlush/alignInsertionFlush",
                            "symbols": [
                                "#/alignInsertionFlush/alignInsertionFlush/None",
                                "#/alignInsertionFlush/alignInsertionFlush/Right"
                            ]
                        }
                    ],
                    "default": "None",
                    "doc": "how to flush ambiguous insertion positions. None (default): insertions not flushed. Right: insertions flushed to the right. STAR Fusion recommended (SF)",
                    "id": "#alignInsertionFlush"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1000000,
                    "doc": "maximum intron size. SF recommends 100000",
                    "id": "#alignIntronMax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1000000,
                    "doc": "maximum genomic distance between mates, SF recommends 100000 to avoid readthru fusions within 100k",
                    "id": "#alignMatesGapMax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "minimum overhang for annotated junctions. SF recommends 10",
                    "id": "#alignSJDBoverhangMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 8,
                    "doc": "minimum overhang for unannotated junctions. ENCODE default used.",
                    "id": "#alignSJoverhangMin"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "5 -1 5 5",
                    "doc": "maximum number of mismatches for stitching of the splice junctions. Value '5 -1 5 5' improves SF chimeric junctions, also recommended by arriba (AR)",
                    "id": "#alignSJstitchMismatchNmax"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#alignSoftClipAtReferenceEnds/alignSoftClipAtReferenceEnds",
                            "symbols": [
                                "#/alignSoftClipAtReferenceEnds/alignSoftClipAtReferenceEnds/Yes",
                                "#/alignSoftClipAtReferenceEnds/alignSoftClipAtReferenceEnds/No"
                            ]
                        }
                    ],
                    "default": "Yes",
                    "doc": "allow the soft-clipping of the alignments past the end of the chromosomes. Yes (default): allow. No: prohibit, useful for compatibility with Cufflinks",
                    "id": "#alignSoftClipAtReferenceEnds"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 0,
                    "doc": "minimum mapped length for a read mate that is spliced. SF recommends 30",
                    "id": "#alignSplicedMateMapLmin"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.5,
                    "doc": "alignSplicedMateMapLmin normalized to mate length. SF recommends 0, AR 0.5",
                    "id": "#alignSplicedMateMapLminOverLmate"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "0-based column number in file of fusion name.",
                    "default": 30,
                    "id": "#annofuse_col_num"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Mem intensive tool. Set in GB",
                    "default": 64,
                    "id": "#arriba_memory"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 10,
                    "doc": "minimum overhang for a chimeric junction. SF recommends 8, AR 10",
                    "id": "#chimJunctionOverhangMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "maximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments",
                    "id": "#chimMainSegmentMultNmax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 50,
                    "doc": "maximum number of chimeric multi-alignments. SF recommends 20, AR 50.",
                    "id": "#chimMultimapNmax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "the score range for multi-mapping chimeras below the best chimeric score. Only works with chimMultimapNmax > 1. SF recommends 3",
                    "id": "#chimMultimapScoreRange"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 20,
                    "doc": "int>=0: to trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value. SF recommends 10",
                    "id": "#chimNonchimScoreDropMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "formatting type for the Chimeric.out.junction file, value 1 REQUIRED for SF",
                    "id": "#chimOutJunctionFormat"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#chimOutType/chimOutType",
                            "symbols": [
                                "#/chimOutType/chimOutType/Junctions SeparateSAMold WithinBAM SoftClip",
                                "#/chimOutType/chimOutType/Junctions",
                                "#/chimOutType/chimOutType/SeparateSAMold",
                                "#/chimOutType/chimOutType/WithinBAM SoftClip",
                                "#/chimOutType/chimOutType/WithinBAM HardClip",
                                "#/chimOutType/chimOutType/Junctions SeparateSAMold",
                                "#/chimOutType/chimOutType/Junctions WithinBAM SoftClip",
                                "#/chimOutType/chimOutType/Junctions WithinBAM HardClip",
                                "#/chimOutType/chimOutType/Junctions SeparateSAMold WithinBAM HardClip",
                                "#/chimOutType/chimOutType/SeparateSAMold WithinBAM SoftClip",
                                "#/chimOutType/chimOutType/SeparateSAMold WithinBAM HardClip"
                            ]
                        }
                    ],
                    "default": "Junctions WithinBAM SoftClip",
                    "doc": "type of chimeric output. Args are additive, and defined as such - Junctions: Chimeric.out.junction. SeparateSAMold: output old SAM into separate Chimeric.out.sam file WithinBAM: output into main aligned BAM files (Aligned.*.bam). WithinBAM HardClip: hard-clipping in the CIGAR for supplemental chimeric alignments WithinBAM SoftClip:soft-clipping in the CIGAR for supplemental chimeric alignments",
                    "id": "#chimOutType"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 30,
                    "doc": "max drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length. AR recommends 30",
                    "id": "#chimScoreDropMax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": -1,
                    "doc": "penalty for a non-GT/AG chimeric junction. default -1, SF recommends -4, AR -1",
                    "id": "#chimScoreJunctionNonGTAG"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1,
                    "doc": "int>=0: minimum difference (separation) between the best chimeric score and the next one. AR recommends 1",
                    "id": "#chimScoreSeparation"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 10,
                    "doc": "minimum length of chimeric segment length, if ==0, no chimeric output. REQUIRED for SF, 12 is their default, AR recommends 10",
                    "id": "#chimSegmentMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 3,
                    "doc": "maximum gap in the read sequence between chimeric segments. AR recommends 3",
                    "id": "#chimSegmentReadGapMax"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "If part of a workflow, recommend compressing this file as final output",
                    "id": "#compress_chimeric_junction"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        }
                    ],
                    "doc": "If any input alignment files are CRAM, provide the reference used to create them",
                    "id": "#cram_reference"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Set this option if you want to estimate the read start position distribution (RSPD) from data",
                    "default": true,
                    "id": "#estimate_rspd"
                },
                {
                    "type": "File",
                    "doc": "Tar ball with fusion_annot_lib.idx and blast_pairs.idx from STAR-Fusion CTAT Genome lib. Can be same as FusionGenome, but only two files needed from that package",
                    "id": "#fusion_annotator_ref",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/63cff818facdd82011c8d6fe",
                        "name": "#fusion_annotator_ref/GRCh38_v39_fusion_annot_custom.tar.gz"
                    }
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#genomeLoad/genomeLoad",
                            "symbols": [
                                "#/genomeLoad/genomeLoad/NoSharedMemory",
                                "#/genomeLoad/genomeLoad/LoadAndKeep",
                                "#/genomeLoad/genomeLoad/LoadAndRemove",
                                "#/genomeLoad/genomeLoad/LoadAndExit"
                            ]
                        }
                    ],
                    "default": "NoSharedMemory",
                    "doc": "mode of shared memory usage for the genome file. In this context, the default value makes the most sense, the others are their as a courtesy.",
                    "id": "#genomeLoad"
                },
                {
                    "type": "File",
                    "doc": "General transfer format (gtf) file with gene models corresponding to fasta reference",
                    "id": "#gtf_anno",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62853e7ad63f7c6d8d7ae5a4",
                        "name": "#gtf_anno/gencode.v39.primary_assembly.annotation.gtf"
                    }
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "FASTA file containing the coordinates of the HLA genes for RNA.",
                    "id": "#hla_rna_gene_coords",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/6669ac8127374715fc3ba3c1",
                        "name": "#hla_rna_gene_coords/hla_v3.43.0_gencode_v39_rna_coord.fa"
                    }
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "doc": "FASTA file containing the HLA allele reference sequences for RNA.",
                    "id": "#hla_rna_ref_seqs",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/6669ac8127374715fc3ba3c3",
                        "name": "#hla_rna_ref_seqs/hla_v3.43.0_gencode_v39_rna_seq.fa"
                    }
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "secondaryFiles": [
                        {
                            "pattern": "^.bai",
                            "required": false
                        },
                        {
                            "pattern": ".bai",
                            "required": false
                        },
                        {
                            "pattern": "^.crai",
                            "required": false
                        },
                        {
                            "pattern": ".crai",
                            "required": false
                        }
                    ],
                    "doc": "List of input SAM/BAM/CRAM files to process",
                    "id": "#input_alignment_files"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "doc": "List of R2 paired end FASTQ files to process",
                    "id": "#input_pe_mates"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "doc": "List of R1 paired end FASTQ files to process",
                    "id": "#input_pe_reads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "doc": "List of RG strings to use in PE processing",
                    "id": "#input_pe_rg_strs"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "doc": "List of single end FASTQ files to process",
                    "id": "#input_se_reads"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "string"
                        }
                    ],
                    "doc": "List of RG strings to use in SE processing",
                    "id": "#input_se_rg_strs"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "For alignment files inputs, are the reads paired end?",
                    "id": "#is_paired_end"
                },
                {
                    "type": "File",
                    "doc": "Specialized index of a **transcriptome** fasta file for kallisto",
                    "id": "#kallisto_idx",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62853e7ad63f7c6d8d7ae5a6",
                        "name": "#kallisto_idx/RSEM_GENCODE39.transcripts.kallisto.idx"
                    }
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 1200000,
                    "doc": "maximum number of junction to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run",
                    "id": "#limitSjdbInsertNsj"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "If trimming adapters, what is the minimum length reads should have post trimming",
                    "id": "#min_len"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#outFilterIntronMotifs/outFilterIntronMotifs",
                            "symbols": [
                                "#/outFilterIntronMotifs/outFilterIntronMotifs/None",
                                "#/outFilterIntronMotifs/outFilterIntronMotifs/RemoveNoncanonical",
                                "#/outFilterIntronMotifs/outFilterIntronMotifs/RemoveNoncanonicalUnannotated"
                            ]
                        }
                    ],
                    "default": "None",
                    "doc": "filter alignment using their motifs. None (default): no filtering. RemoveNoncanonical: filter out alignments that contain non-canonical junctions RemoveNoncanonicalUnannotated: filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.",
                    "id": "#outFilterIntronMotifs"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.33,
                    "doc": "alignment will be output only if the number of matched bases is higher than or equal to this value., normalized to the read length (sum of mates' lengths for paired-end reads)",
                    "id": "#outFilterMatchNminOverLread"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 999,
                    "doc": "maximum number of mismatches per pair, large number switches off this filter",
                    "id": "#outFilterMismatchNmax"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.1,
                    "doc": "alignment will be output only if its ratio of mismatches to *mapped* length is less than or equal to this value",
                    "id": "#outFilterMismatchNoverLmax"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 50,
                    "doc": "max number of multiple alignments allowed for a read: if exceeded, the read is considered unmapped. ENCODE value is default. AR recommends 50",
                    "id": "#outFilterMultimapNmax"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.33,
                    "doc": "alignment will be output only if its score is higher than or equal to this value, normalized to read length (sum of mate's lengths for paired-end reads)",
                    "id": "#outFilterScoreMinOverLread"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#outFilterType/outFilterType",
                            "symbols": [
                                "#/outFilterType/outFilterType/BySJout",
                                "#/outFilterType/outFilterType/Normal"
                            ]
                        }
                    ],
                    "default": "BySJout",
                    "doc": "type of filtering. Normal: standard filtering using only current alignment. BySJout (default): keep only those reads that contain junctions that passed filtering into SJ.out.tab.",
                    "id": "#outFilterType"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#outReadsUnmapped/outReadsUnmapped",
                            "symbols": [
                                "#/outReadsUnmapped/outReadsUnmapped/None",
                                "#/outReadsUnmapped/outReadsUnmapped/Fastx"
                            ]
                        }
                    ],
                    "default": "None",
                    "doc": "output of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). none (default): no output. Fastx: output in separate fasta/fastq files, Unmapped.out.mate1/2.",
                    "id": "#outReadsUnmapped"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "default": "NH HI AS nM NM ch RG",
                    "doc": "a string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Please refer to the STAR manual, as there are numerous combinations: https://raw.githubusercontent.com/alexdobin/star_2.7.10a/master/doc/STARmanual.pdf",
                    "id": "#outSAMattributes"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#outSAMstrandField/outSAMstrandField",
                            "symbols": [
                                "#/outSAMstrandField/outSAMstrandField/intronMotif",
                                "#/outSAMstrandField/outSAMstrandField/None"
                            ]
                        }
                    ],
                    "default": "intronMotif",
                    "doc": "Cufflinks-like strand field flag. None: not used. intronMotif (default): strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.",
                    "id": "#outSAMstrandField"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#outSAMtype/outSAMtype",
                            "symbols": [
                                "#/outSAMtype/outSAMtype/BAM Unsorted",
                                "#/outSAMtype/outSAMtype/None",
                                "#/outSAMtype/outSAMtype/BAM SortedByCoordinate",
                                "#/outSAMtype/outSAMtype/SAM Unsorted",
                                "#/outSAMtype/outSAMtype/SAM SortedByCoordinate"
                            ]
                        }
                    ],
                    "default": "BAM Unsorted",
                    "doc": "type of SAM/BAM output. None: no SAM/BAM output. Otherwise, first word is output type (BAM or SAM), second is sort type (Unsorted or SortedByCoordinate)",
                    "id": "#outSAMtype"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#outSAMunmapped/outSAMunmapped",
                            "symbols": [
                                "#/outSAMunmapped/outSAMunmapped/Within",
                                "#/outSAMunmapped/outSAMunmapped/None",
                                "#/outSAMunmapped/outSAMunmapped/Within KeepPairs"
                            ]
                        }
                    ],
                    "default": "Within",
                    "doc": "output of unmapped reads in the SAM format. None: no output. Within (default): output unmapped reads within the main SAM file (i.e. Aligned.out.sam) Within KeepPairs: record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads",
                    "id": "#outSAMunmapped"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "String to use as basename for outputs. Will use read1 file basename if null",
                    "id": "#output_basename"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "default": 0.01,
                    "doc": "maximum proportion of mismatched bases in the overlap area. SF recommends 0.1",
                    "id": "#peOverlapMMp"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 10,
                    "doc": "minimum number of overlap bases to trigger mates merging and realignment. Specify >0 value to switch on the 'merging of overlapping mates'algorithm. SF recommends 12,  AR recommends 10",
                    "id": "#peOverlapNbasesMin"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Phred scale used for quality scores of the reads",
                    "id": "#quality_base"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "int"
                        }
                    ],
                    "doc": "Quality trim cutoff, see https://cutadapt.readthedocs.io/en/v3.4/guide.html#quality-trimming for how 5' 3' is handled",
                    "id": "#quality_cutoff"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#quantMode/quantMode",
                            "symbols": [
                                "#/quantMode/quantMode/TranscriptomeSAM GeneCounts",
                                "#/quantMode/quantMode/-",
                                "#/quantMode/quantMode/TranscriptomeSAM",
                                "#/quantMode/quantMode/GeneCounts"
                            ]
                        }
                    ],
                    "default": "TranscriptomeSAM GeneCounts",
                    "doc": "types of quantification requested. -: none. TranscriptomeSAM: output SAM/BAM alignments to transcriptome into a separate file GeneCounts: count reads per gene. Choices are additive, so default is 'TranscriptomeSAM GeneCounts'",
                    "id": "#quantMode"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "!Warning this will be applied to all R1 reads (PE, SE, and reads from alignment files)! If you have multiple adapters, manually trim your reads before input. If they share the same adapter, supply adapter here",
                    "id": "#r1_adapter"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "!Warning this will be applied to all R2 reads (PE and reads from alignment files)! If you have multiple adapters, manually trim your reads before input. If they share the same adapter, supply adapter here",
                    "id": "#r2_adapter"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "The median read length for the reads provided.",
                    "id": "#read_length_median"
                },
                {
                    "type": [
                        "null",
                        "float"
                    ],
                    "doc": "Standard Deviation of the median read length.",
                    "id": "#read_length_stddev"
                },
                {
                    "type": "File",
                    "doc": "GRCh38.primary_assembly.genome.fa",
                    "secondaryFiles": [
                        {
                            "pattern": ".fai",
                            "required": null
                        }
                    ],
                    "id": "#reference_fasta",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/5f500135e4b0370371c051b4",
                        "name": "#reference_fasta/GRCh38.primary_assembly.genome.fa",
                        "secondaryFiles": [
                            {
                                "class": "File",
                                "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/62866da14d85bc2e02ba52db",
                                "name": "#reference_fasta/GRCh38.primary_assembly.genome.fa/GRCh38.primary_assembly.genome.fa.fai"
                            }
                        ]
                    }
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Allow alignments with soft or hard clipping to be used.",
                    "id": "#rmats_allow_clipping"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Select for novel splice site detection or unannotated splice sites. 'true' to detect or add this parameter, 'false' to disable denovo detection. Tool Default: false",
                    "id": "#rmats_novel_splice_sites"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "GB of RAM to allocate to RMATs.",
                    "id": "#rmats_ram"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Select to skip statistical analysis, either between two groups or on single sample group. 'true' to add this parameter. Tool default: false",
                    "id": "#rmats_stat_off"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Threads to allocate to RMATs.",
                    "id": "#rmats_threads"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "Allow reads with lengths that differ from --readLength to be processed. --readLength will still be used to determine IncFormLen and SkipFormLen.",
                    "id": "#rmats_variable_read_length"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "default": 36,
                    "doc": "Adjust this value to change number of cores used by STAR.",
                    "id": "#runThreadN"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "Set to false to disable T1k HLA typing",
                    "id": "#run_t1k"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "Sample ID of the input reads. If not provided, will use reads1 file basename.",
                    "id": "#sample_name"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Num cores for align2fastq conversion, if input is an alignment file",
                    "default": 16,
                    "id": "#samtools_fastq_cores"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "This is what the path will be when genome_tar is unpackaged",
                    "default": "GRCh38_v39_CTAT_lib_Mar242022.CUSTOM",
                    "id": "#star_fusion_genome_untar_path"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "default": true,
                    "doc": "Set if the flag in BAM for the unmapped read-pair is nonconcordant",
                    "id": "#t1k_abnormal_unmap_flag"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "GB of RAM to allocate to T1k.",
                    "id": "#t1k_ram"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#twopassMode/twopassMode",
                            "symbols": [
                                "#/twopassMode/twopassMode/Basic",
                                "#/twopassMode/twopassMode/None"
                            ]
                        }
                    ],
                    "default": "Basic",
                    "doc": "Enable two pass mode to detect novel splice events. Default is basic (on).",
                    "id": "#twopassMode"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "name": "#wf_strand_param/wf_strand_param",
                            "symbols": [
                                "#/wf_strand_param/wf_strand_param/default",
                                "#/wf_strand_param/wf_strand_param/rf-stranded",
                                "#/wf_strand_param/wf_strand_param/fr-stranded"
                            ]
                        }
                    ],
                    "doc": "use 'default' for unstranded/auto, 'rf-stranded' if read1 in the fastq read pairs is reverse complement to the transcript, 'fr-stranded' if read1 same sense as transcript",
                    "id": "#wf_strand_param"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#/rna_seqc/Metrics",
                    "doc": "Metrics on mapping, intronic, exonic rates, count information, etc",
                    "id": "#RNASeQC_Metrics"
                },
                {
                    "type": "File",
                    "outputSource": "#/supplemental/RNASeQC_counts",
                    "doc": "Contains gene tpm, gene read, and exon counts",
                    "id": "#RNASeQC_counts"
                },
                {
                    "type": "File",
                    "outputSource": "#/rsem/gene_out",
                    "doc": "RSEM gene expression estimates",
                    "id": "#RSEM_gene"
                },
                {
                    "type": "File",
                    "outputSource": "#/rsem/isoform_out",
                    "doc": "RSEM isoform expression estimates",
                    "id": "#RSEM_isoform"
                },
                {
                    "type": "File",
                    "outputSource": "#/star_fusion_1-10-1/abridged_coding",
                    "doc": "STAR fusion detection from chimeric reads",
                    "id": "#STAR-Fusion_results"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#/star_fusion_1-10-1/chimeric_junction_compressed",
                    "doc": "STAR chimeric junctions",
                    "id": "#STAR_chimeric_junctions"
                },
                {
                    "type": "File",
                    "outputSource": "#/star_2-7-10a/log_final_out",
                    "doc": "STAR metricslog file of unique, multi-mapping, unmapped, and chimeric reads",
                    "id": "#STAR_final_log"
                },
                {
                    "type": "File",
                    "outputSource": "#/star_2-7-10a/gene_counts",
                    "doc": "STAR genecounts",
                    "id": "#STAR_gene_count"
                },
                {
                    "type": "File",
                    "outputSource": "#/star_2-7-10a/junctions_out",
                    "doc": "STARjunction reads",
                    "id": "#STAR_junctions_out"
                },
                {
                    "type": "File",
                    "outputSource": "#/samtools_bam_to_cram/output",
                    "doc": "STAR sorted and indexed genomic alignment cram",
                    "id": "#STAR_sorted_genomic_cram"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#/annofuse/annofuse_filtered_fusions_tsv",
                    "doc": "Filtered fusions called by annoFuse.",
                    "id": "#annofuse_filtered_fusions_tsv"
                },
                {
                    "type": "File",
                    "outputSource": "#/arriba_fusion_2-2-1/arriba_fusions",
                    "doc": "Fusion output from Arriba",
                    "id": "#arriba_fusion_results"
                },
                {
                    "type": "File",
                    "outputSource": "#/arriba_draw_2-2-1/arriba_pdf",
                    "doc": "pdf output from Arriba",
                    "id": "#arriba_fusion_viz"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "outputSource": "#/preprocess_reads/cutadapt_stats",
                    "doc": "Cutadapt stats output, only if adapter is supplied.",
                    "id": "#cutadapt_stats"
                },
                {
                    "type": "File",
                    "outputSource": "#/kallisto/abundance_out",
                    "doc": "Gene abundance output from STAR genomic bam file",
                    "id": "#kallisto_Abundance"
                },
                {
                    "type": "File",
                    "outputSource": "#/rmats/filtered_alternative_3_prime_splice_sites_jc",
                    "doc": "Alternative 3 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support",
                    "id": "#rmats_filtered_alternative_3_prime_splice_sites_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#/rmats/filtered_alternative_5_prime_splice_sites_jc",
                    "doc": "Alternative 5 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support",
                    "id": "#rmats_filtered_alternative_5_prime_splice_sites_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#/rmats/filtered_mutually_exclusive_exons_jc",
                    "doc": "Mutually exclusive exons JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support",
                    "id": "#rmats_filtered_mutually_exclusive_exons_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#/rmats/filtered_retained_introns_jc",
                    "doc": "Retained introns JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support",
                    "id": "#rmats_filtered_retained_introns_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#/rmats/filtered_skipped_exons_jc",
                    "doc": "Skipped exons JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support",
                    "id": "#rmats_filtered_skipped_exons_jc"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#/t1k/genotype_tsv",
                    "doc": "Genotyping results from T1k",
                    "id": "#t1k_genotype_tsv"
                }
            ],
            "steps": [
                {
                    "run": "#kfdrc_annoFuse_wf.cwl",
                    "in": [
                        {
                            "source": "#fusion_annotator_ref",
                            "id": "#annofuse/FusionGenome"
                        },
                        {
                            "source": "#/arriba_fusion_2-2-1/arriba_fusions",
                            "id": "#annofuse/arriba_output_file"
                        },
                        {
                            "source": "#annofuse_col_num",
                            "id": "#annofuse/col_num"
                        },
                        {
                            "source": "#star_fusion_genome_untar_path",
                            "id": "#annofuse/genome_untar_path"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#annofuse/output_basename"
                        },
                        {
                            "source": "#/rsem/gene_out",
                            "id": "#annofuse/rsem_expr_file"
                        },
                        {
                            "source": "#/basename_picker/outsample",
                            "id": "#annofuse/sample_name"
                        },
                        {
                            "source": "#/star_fusion_1-10-1/abridged_coding",
                            "id": "#annofuse/star_fusion_output_file"
                        }
                    ],
                    "out": [
                        "#/annofuse/annofuse_filtered_fusions_tsv"
                    ],
                    "id": "#annofuse"
                },
                {
                    "run": "#arriba_draw_2.2.1.cwl",
                    "in": [
                        {
                            "source": "#/arriba_fusion_2-2-1/arriba_fusions",
                            "id": "#arriba_draw_2-2-1/fusions"
                        },
                        {
                            "source": [
                                "#/samtools_sort/sorted_bam",
                                "#/samtools_sort/sorted_bai"
                            ],
                            "valueFrom": "${\n  var bundle = self[0];\n  bundle.secondaryFiles = [self[1]];\n  return bundle;\n}\n",
                            "id": "#arriba_draw_2-2-1/genome_aligned_bam"
                        },
                        {
                            "source": "#gtf_anno",
                            "id": "#arriba_draw_2-2-1/gtf_anno"
                        },
                        {
                            "source": "#arriba_memory",
                            "id": "#arriba_draw_2-2-1/memory"
                        }
                    ],
                    "out": [
                        "#/arriba_draw_2-2-1/arriba_pdf"
                    ],
                    "id": "#arriba_draw_2-2-1"
                },
                {
                    "run": "#arriba_fusion_2.2.1.cwl",
                    "in": [
                        {
                            "source": "#/strand_parse/arriba_std",
                            "id": "#arriba_fusion_2-2-1/arriba_strand_flag"
                        },
                        {
                            "source": [
                                "#/samtools_sort/sorted_bam",
                                "#/samtools_sort/sorted_bai"
                            ],
                            "valueFrom": "${\n  var bundle = self[0];\n  bundle.secondaryFiles = [self[1]];\n  return bundle;\n}\n",
                            "id": "#arriba_fusion_2-2-1/genome_aligned_bam"
                        },
                        {
                            "source": "#gtf_anno",
                            "id": "#arriba_fusion_2-2-1/gtf_anno"
                        },
                        {
                            "source": "#arriba_memory",
                            "id": "#arriba_fusion_2-2-1/memory"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#arriba_fusion_2-2-1/outFileNamePrefix"
                        },
                        {
                            "source": "#reference_fasta",
                            "id": "#arriba_fusion_2-2-1/reference_fasta"
                        }
                    ],
                    "out": [
                        "#/arriba_fusion_2-2-1/arriba_fusions"
                    ],
                    "id": "#arriba_fusion_2-2-1"
                },
                {
                    "run": "#bam_strandness.cwl",
                    "in": [
                        {
                            "source": "#gtf_anno",
                            "id": "#bam_strandness/annotation_gtf"
                        },
                        {
                            "source": "#/samtools_sort/sorted_bam",
                            "id": "#bam_strandness/input_bam"
                        },
                        {
                            "source": "#kallisto_idx",
                            "id": "#bam_strandness/kallisto_idx"
                        },
                        {
                            "source": "#/preprocess_reads/processed_reads_record",
                            "valueFrom": "$(self.some(function(e) { return e.is_paired_end }))\n",
                            "id": "#bam_strandness/paired_end"
                        }
                    ],
                    "out": [
                        "#/bam_strandness/output",
                        "#/bam_strandness/strandedness",
                        "#/bam_strandness/read_length_median",
                        "#/bam_strandness/read_length_stddev",
                        "#/bam_strandness/is_paired_end"
                    ],
                    "id": "#bam_strandness"
                },
                {
                    "run": "#clt_basename_picker.cwl",
                    "in": [
                        {
                            "source": "#output_basename",
                            "id": "#basename_picker/output_basename"
                        },
                        {
                            "source": [
                                "#/lists_to_reads_records/am_reads_records",
                                "#/lists_to_reads_records/pe_fq_reads_records",
                                "#/lists_to_reads_records/se_fq_reads_records"
                            ],
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "valueFrom": "$(self.map(function(e) { return e.reads1.basename.split('.')[0] }).join(\"-\"))",
                            "id": "#basename_picker/root_name"
                        },
                        {
                            "source": "#sample_name",
                            "id": "#basename_picker/sample_name"
                        }
                    ],
                    "out": [
                        "#/basename_picker/outname",
                        "#/basename_picker/outsample",
                        "#/basename_picker/outrg"
                    ],
                    "id": "#basename_picker"
                },
                {
                    "run": "#kallisto_calc_expression.cwl",
                    "in": [
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#kallisto/SampleID"
                        },
                        {
                            "source": [
                                "#read_length_median",
                                "#/bam_strandness/read_length_median"
                            ],
                            "valueFrom": "$(self.some(function(e){ return e != null }) ? self.filter(function(e) { return e != null })[0] : null)\n",
                            "id": "#kallisto/avg_frag_len"
                        },
                        {
                            "source": "#/preprocess_reads/processed_reads_record",
                            "id": "#kallisto/reads_records"
                        },
                        {
                            "source": [
                                "#read_length_stddev",
                                "#/bam_strandness/read_length_stddev"
                            ],
                            "valueFrom": "$(self.some(function(e){ return e != null }) ? self.filter(function(e) { return e != null })[0] : null)\n",
                            "id": "#kallisto/std_dev"
                        },
                        {
                            "source": "#/strand_parse/kallisto_std",
                            "id": "#kallisto/strand"
                        },
                        {
                            "source": "#kallisto_idx",
                            "id": "#kallisto/transcript_idx"
                        }
                    ],
                    "out": [
                        "#/kallisto/abundance_out"
                    ],
                    "id": "#kallisto"
                },
                {
                    "run": "#lists_to_reads_records.cwl",
                    "in": [
                        {
                            "source": "#cram_reference",
                            "id": "#lists_to_reads_records/cram_reference"
                        },
                        {
                            "source": "#/samtools_split/bam_files",
                            "valueFrom": "$(self.reduce(function(e,i) { return e.concat(i) }, []))\n",
                            "id": "#lists_to_reads_records/input_alignment_files"
                        },
                        {
                            "source": "#input_pe_mates",
                            "id": "#lists_to_reads_records/input_pe_mates"
                        },
                        {
                            "source": "#input_pe_reads",
                            "id": "#lists_to_reads_records/input_pe_reads"
                        },
                        {
                            "source": "#input_pe_rg_strs",
                            "id": "#lists_to_reads_records/input_pe_rg_strs"
                        },
                        {
                            "source": "#input_se_reads",
                            "id": "#lists_to_reads_records/input_se_reads"
                        },
                        {
                            "source": "#input_se_rg_strs",
                            "id": "#lists_to_reads_records/input_se_rg_strs"
                        },
                        {
                            "source": "#is_paired_end",
                            "id": "#lists_to_reads_records/is_paired_end"
                        },
                        {
                            "source": "#min_len",
                            "id": "#lists_to_reads_records/min_len"
                        },
                        {
                            "source": "#quality_base",
                            "id": "#lists_to_reads_records/quality_base"
                        },
                        {
                            "source": "#quality_cutoff",
                            "id": "#lists_to_reads_records/quality_cutoff"
                        },
                        {
                            "source": "#r1_adapter",
                            "id": "#lists_to_reads_records/r1_adapter"
                        },
                        {
                            "source": "#r2_adapter",
                            "id": "#lists_to_reads_records/r2_adapter"
                        }
                    ],
                    "out": [
                        "#/lists_to_reads_records/am_reads_records",
                        "#/lists_to_reads_records/pe_fq_reads_records",
                        "#/lists_to_reads_records/se_fq_reads_records"
                    ],
                    "id": "#lists_to_reads_records"
                },
                {
                    "run": "#preprocess_reads.cwl",
                    "scatter": [
                        "#preprocess_reads/reads_record"
                    ],
                    "in": [
                        {
                            "source": "#output_basename",
                            "id": "#preprocess_reads/output_basename"
                        },
                        {
                            "source": [
                                "#/lists_to_reads_records/am_reads_records",
                                "#/lists_to_reads_records/pe_fq_reads_records",
                                "#/lists_to_reads_records/se_fq_reads_records"
                            ],
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "id": "#preprocess_reads/reads_record"
                        },
                        {
                            "source": "#sample_name",
                            "id": "#preprocess_reads/sample_name"
                        },
                        {
                            "source": "#samtools_fastq_cores",
                            "id": "#preprocess_reads/samtools_fastq_cores"
                        }
                    ],
                    "out": [
                        "#/preprocess_reads/processed_reads_record",
                        "#/preprocess_reads/cutadapt_stats"
                    ],
                    "id": "#preprocess_reads"
                },
                {
                    "run": "#rmats_wf.cwl",
                    "in": [
                        {
                            "source": "#rmats_allow_clipping",
                            "id": "#rmats/allow_clipping"
                        },
                        {
                            "source": "#gtf_anno",
                            "id": "#rmats/gtf_annotation"
                        },
                        {
                            "source": "#rmats_novel_splice_sites",
                            "id": "#rmats/novel_splice_sites"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#rmats/output_basename"
                        },
                        {
                            "source": "#read_length_median",
                            "id": "#rmats/read_length"
                        },
                        {
                            "source": "#/bam_strandness/is_paired_end",
                            "valueFrom": "$(self ? \"paired\" : \"single\")\n",
                            "id": "#rmats/read_type"
                        },
                        {
                            "source": "#rmats_ram",
                            "id": "#rmats/rmats_ram"
                        },
                        {
                            "source": "#rmats_threads",
                            "id": "#rmats/rmats_threads"
                        },
                        {
                            "source": "#/samtools_sort/sorted_bam",
                            "valueFrom": "$([self])\n",
                            "id": "#rmats/sample_1_bams"
                        },
                        {
                            "source": "#rmats_stat_off",
                            "id": "#rmats/stat_off"
                        },
                        {
                            "source": [
                                "#wf_strand_param",
                                "#/bam_strandness/strandedness"
                            ],
                            "pickValue": "first_non_null",
                            "valueFrom": "$(self == \"rf-stranded\" ? \"fr-firststrand\" : self == \"fr-stranded\" ? \"fr-secondstrand\" : \"fr-unstranded\")\n",
                            "id": "#rmats/strandedness"
                        },
                        {
                            "source": "#rmats_variable_read_length",
                            "id": "#rmats/variable_read_length"
                        }
                    ],
                    "out": [
                        "#/rmats/filtered_alternative_3_prime_splice_sites_jc",
                        "#/rmats/filtered_alternative_5_prime_splice_sites_jc",
                        "#/rmats/filtered_mutually_exclusive_exons_jc",
                        "#/rmats/filtered_retained_introns_jc",
                        "#/rmats/filtered_skipped_exons_jc"
                    ],
                    "id": "#rmats"
                },
                {
                    "run": "#rnaseqc_2.4.2.cwl",
                    "in": [
                        {
                            "source": "#/samtools_sort/sorted_bam",
                            "id": "#rna_seqc/aligned_sorted_reads"
                        },
                        {
                            "source": "#RNAseQC_GTF",
                            "id": "#rna_seqc/collapsed_gtf"
                        },
                        {
                            "source": "#/strand_parse/rnaseqc_std",
                            "id": "#rna_seqc/stranded"
                        },
                        {
                            "source": "#/bam_strandness/is_paired_end",
                            "valueFrom": "$(!self)\n",
                            "id": "#rna_seqc/unpaired"
                        }
                    ],
                    "out": [
                        "#/rna_seqc/Metrics",
                        "#/rna_seqc/Gene_TPM",
                        "#/rna_seqc/Gene_count",
                        "#/rna_seqc/Exon_count"
                    ],
                    "id": "#rna_seqc"
                },
                {
                    "run": "#rsem_calc_expression.cwl",
                    "in": [
                        {
                            "source": "#/star_2-7-10a/transcriptome_bam_out",
                            "id": "#rsem/bam"
                        },
                        {
                            "source": "#estimate_rspd",
                            "id": "#rsem/estimate_rspd"
                        },
                        {
                            "source": "#RSEMgenome",
                            "id": "#rsem/genomeDir"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#rsem/outFileNamePrefix"
                        },
                        {
                            "source": "#/bam_strandness/is_paired_end",
                            "id": "#rsem/paired_end"
                        },
                        {
                            "source": "#/strand_parse/rsem_std",
                            "id": "#rsem/strandedness"
                        }
                    ],
                    "out": [
                        "#/rsem/gene_out",
                        "#/rsem/isoform_out"
                    ],
                    "id": "#rsem"
                },
                {
                    "run": "#samtools_bam_to_cram.cwl",
                    "in": [
                        {
                            "source": [
                                "#/samtools_sort/sorted_bam",
                                "#/samtools_sort/sorted_bai"
                            ],
                            "valueFrom": "${\n  var bundle = self[0];\n  bundle.secondaryFiles = [self[1]];\n  return bundle;\n}\n",
                            "id": "#samtools_bam_to_cram/input_bam"
                        },
                        {
                            "source": "#reference_fasta",
                            "id": "#samtools_bam_to_cram/reference"
                        }
                    ],
                    "out": [
                        "#/samtools_bam_to_cram/output"
                    ],
                    "id": "#samtools_bam_to_cram"
                },
                {
                    "run": "#samtools_sort.cwl",
                    "in": [
                        {
                            "source": "#/star_2-7-10a/chimeric_sam_out",
                            "id": "#samtools_sort/chimeric_sam_out"
                        },
                        {
                            "source": "#/star_2-7-10a/genomic_bam_out",
                            "id": "#samtools_sort/unsorted_bam"
                        }
                    ],
                    "out": [
                        "#/samtools_sort/sorted_bam",
                        "#/samtools_sort/sorted_bai",
                        "#/samtools_sort/chimeric_bam_out"
                    ],
                    "id": "#samtools_sort"
                },
                {
                    "run": "#samtools_split.cwl",
                    "scatter": [
                        "#samtools_split/input_reads"
                    ],
                    "in": [
                        {
                            "source": "#input_alignment_files",
                            "linkMerge": "merge_flattened",
                            "pickValue": "all_non_null",
                            "id": "#samtools_split/input_reads"
                        },
                        {
                            "source": "#cram_reference",
                            "id": "#samtools_split/reference"
                        }
                    ],
                    "out": [
                        "#/samtools_split/bam_files"
                    ],
                    "id": "#samtools_split"
                },
                {
                    "run": "#star_2.7.10a_align.cwl",
                    "in": [
                        {
                            "source": "#alignInsertionFlush",
                            "id": "#star_2-7-10a/alignInsertionFlush"
                        },
                        {
                            "source": "#alignIntronMax",
                            "id": "#star_2-7-10a/alignIntronMax"
                        },
                        {
                            "source": "#alignMatesGapMax",
                            "id": "#star_2-7-10a/alignMatesGapMax"
                        },
                        {
                            "source": "#alignSJDBoverhangMin",
                            "id": "#star_2-7-10a/alignSJDBoverhangMin"
                        },
                        {
                            "source": "#alignSJoverhangMin",
                            "id": "#star_2-7-10a/alignSJoverhangMin"
                        },
                        {
                            "source": "#alignSJstitchMismatchNmax",
                            "id": "#star_2-7-10a/alignSJstitchMismatchNmax"
                        },
                        {
                            "source": "#alignSoftClipAtReferenceEnds",
                            "id": "#star_2-7-10a/alignSoftClipAtReferenceEnds"
                        },
                        {
                            "source": "#alignSplicedMateMapLmin",
                            "id": "#star_2-7-10a/alignSplicedMateMapLmin"
                        },
                        {
                            "source": "#alignSplicedMateMapLminOverLmate",
                            "id": "#star_2-7-10a/alignSplicedMateMapLminOverLmate"
                        },
                        {
                            "source": "#chimJunctionOverhangMin",
                            "id": "#star_2-7-10a/chimJunctionOverhangMin"
                        },
                        {
                            "source": "#chimMainSegmentMultNmax",
                            "id": "#star_2-7-10a/chimMainSegmentMultNmax"
                        },
                        {
                            "source": "#chimMultimapNmax",
                            "id": "#star_2-7-10a/chimMultimapNmax"
                        },
                        {
                            "source": "#chimMultimapScoreRange",
                            "id": "#star_2-7-10a/chimMultimapScoreRange"
                        },
                        {
                            "source": "#chimNonchimScoreDropMin",
                            "id": "#star_2-7-10a/chimNonchimScoreDropMin"
                        },
                        {
                            "source": "#chimOutJunctionFormat",
                            "id": "#star_2-7-10a/chimOutJunctionFormat"
                        },
                        {
                            "source": "#chimOutType",
                            "id": "#star_2-7-10a/chimOutType"
                        },
                        {
                            "source": "#chimScoreDropMax",
                            "id": "#star_2-7-10a/chimScoreDropMax"
                        },
                        {
                            "source": "#chimScoreJunctionNonGTAG",
                            "id": "#star_2-7-10a/chimScoreJunctionNonGTAG"
                        },
                        {
                            "source": "#chimScoreSeparation",
                            "id": "#star_2-7-10a/chimScoreSeparation"
                        },
                        {
                            "source": "#chimSegmentMin",
                            "id": "#star_2-7-10a/chimSegmentMin"
                        },
                        {
                            "source": "#chimSegmentReadGapMax",
                            "id": "#star_2-7-10a/chimSegmentReadGapMax"
                        },
                        {
                            "source": "#STARgenome",
                            "id": "#star_2-7-10a/genomeDir"
                        },
                        {
                            "source": "#genomeLoad",
                            "id": "#star_2-7-10a/genomeLoad"
                        },
                        {
                            "source": "#limitSjdbInsertNsj",
                            "id": "#star_2-7-10a/limitSjdbInsertNsj"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#star_2-7-10a/outFileNamePrefix"
                        },
                        {
                            "source": "#outFilterIntronMotifs",
                            "id": "#star_2-7-10a/outFilterIntronMotifs"
                        },
                        {
                            "source": "#outFilterMatchNminOverLread",
                            "id": "#star_2-7-10a/outFilterMatchNminOverLread"
                        },
                        {
                            "source": "#outFilterMismatchNmax",
                            "id": "#star_2-7-10a/outFilterMismatchNmax"
                        },
                        {
                            "source": "#outFilterMismatchNoverLmax",
                            "id": "#star_2-7-10a/outFilterMismatchNoverLmax"
                        },
                        {
                            "source": "#outFilterMultimapNmax",
                            "id": "#star_2-7-10a/outFilterMultimapNmax"
                        },
                        {
                            "source": "#outFilterScoreMinOverLread",
                            "id": "#star_2-7-10a/outFilterScoreMinOverLread"
                        },
                        {
                            "source": "#outFilterType",
                            "id": "#star_2-7-10a/outFilterType"
                        },
                        {
                            "source": "#outReadsUnmapped",
                            "id": "#star_2-7-10a/outReadsUnmapped"
                        },
                        {
                            "source": "#outSAMattributes",
                            "id": "#star_2-7-10a/outSAMattributes"
                        },
                        {
                            "source": "#outSAMstrandField",
                            "id": "#star_2-7-10a/outSAMstrandField"
                        },
                        {
                            "source": "#outSAMtype",
                            "id": "#star_2-7-10a/outSAMtype"
                        },
                        {
                            "source": "#outSAMunmapped",
                            "id": "#star_2-7-10a/outSAMunmapped"
                        },
                        {
                            "source": "#peOverlapMMp",
                            "id": "#star_2-7-10a/peOverlapMMp"
                        },
                        {
                            "source": "#peOverlapNbasesMin",
                            "id": "#star_2-7-10a/peOverlapNbasesMin"
                        },
                        {
                            "source": "#quantMode",
                            "id": "#star_2-7-10a/quantMode"
                        },
                        {
                            "source": "#/preprocess_reads/processed_reads_record",
                            "id": "#star_2-7-10a/reads_records"
                        },
                        {
                            "source": "#runThreadN",
                            "id": "#star_2-7-10a/runThreadN"
                        },
                        {
                            "source": "#twopassMode",
                            "id": "#star_2-7-10a/twopassMode"
                        }
                    ],
                    "out": [
                        "#/star_2-7-10a/chimeric_junctions",
                        "#/star_2-7-10a/chimeric_sam_out",
                        "#/star_2-7-10a/gene_counts",
                        "#/star_2-7-10a/genomic_bam_out",
                        "#/star_2-7-10a/junctions_out",
                        "#/star_2-7-10a/log_final_out",
                        "#/star_2-7-10a/log_out",
                        "#/star_2-7-10a/log_progress_out",
                        "#/star_2-7-10a/transcriptome_bam_out"
                    ],
                    "id": "#star_2-7-10a"
                },
                {
                    "run": "#star_fusion_1.10.1_call.cwl",
                    "in": [
                        {
                            "source": "#/star_2-7-10a/chimeric_junctions",
                            "id": "#star_fusion_1-10-1/Chimeric_junction"
                        },
                        {
                            "source": "#compress_chimeric_junction",
                            "id": "#star_fusion_1-10-1/compress_chimeric_junction"
                        },
                        {
                            "source": "#FusionGenome",
                            "id": "#star_fusion_1-10-1/genome_tar"
                        },
                        {
                            "source": "#star_fusion_genome_untar_path",
                            "id": "#star_fusion_1-10-1/genome_untar_path"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#star_fusion_1-10-1/output_basename"
                        }
                    ],
                    "out": [
                        "#/star_fusion_1-10-1/abridged_coding",
                        "#/star_fusion_1-10-1/chimeric_junction_compressed"
                    ],
                    "id": "#star_fusion_1-10-1"
                },
                {
                    "run": "#clt_parse_strand_param.cwl",
                    "in": [
                        {
                            "source": [
                                "#wf_strand_param",
                                "#/bam_strandness/strandedness"
                            ],
                            "pickValue": "first_non_null",
                            "id": "#strand_parse/wf_strand_param"
                        }
                    ],
                    "out": [
                        "#/strand_parse/rsem_std",
                        "#/strand_parse/kallisto_std",
                        "#/strand_parse/rnaseqc_std",
                        "#/strand_parse/arriba_std"
                    ],
                    "id": "#strand_parse"
                },
                {
                    "run": "#supplemental_tar_gz.cwl",
                    "in": [
                        {
                            "source": "#/rna_seqc/Exon_count",
                            "id": "#supplemental/Exon_count"
                        },
                        {
                            "source": "#/rna_seqc/Gene_TPM",
                            "id": "#supplemental/Gene_TPM"
                        },
                        {
                            "source": "#/rna_seqc/Gene_count",
                            "id": "#supplemental/Gene_count"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "id": "#supplemental/outFileNamePrefix"
                        }
                    ],
                    "out": [
                        "#/supplemental/RNASeQC_counts"
                    ],
                    "id": "#supplemental"
                },
                {
                    "run": "#t1k.cwl",
                    "when": "$(inputs.run_t1k)",
                    "in": [
                        {
                            "source": "#t1k_abnormal_unmap_flag",
                            "id": "#t1k/abnormal_unmap_flag"
                        },
                        {
                            "source": [
                                "#/samtools_sort/sorted_bam",
                                "#/samtools_sort/sorted_bai"
                            ],
                            "valueFrom": "${\n  var bundle = self[0];\n  bundle.secondaryFiles = [self[1]];\n  return bundle;\n}\n",
                            "id": "#t1k/bam"
                        },
                        {
                            "source": "#hla_rna_gene_coords",
                            "id": "#t1k/gene_coordinates"
                        },
                        {
                            "source": "#/basename_picker/outname",
                            "valueFrom": "$(self).t1k_hla",
                            "id": "#t1k/output_basename"
                        },
                        {
                            "valueFrom": "hla",
                            "id": "#t1k/preset"
                        },
                        {
                            "source": "#t1k_ram",
                            "id": "#t1k/ram"
                        },
                        {
                            "source": "#hla_rna_ref_seqs",
                            "id": "#t1k/reference"
                        },
                        {
                            "source": "#run_t1k",
                            "id": "#t1k/run_t1k"
                        },
                        {
                            "valueFrom": "$(1 == 1)",
                            "id": "#t1k/skip_post_analysis"
                        }
                    ],
                    "out": [
                        "#/t1k/genotype_tsv"
                    ],
                    "id": "#t1k"
                }
            ],
            "hints": [
                {
                    "class": "https://sevenbridges.commaxNumberOfParallelInstances",
                    "value": 3
                }
            ],
            "https://sevenbridges.comlicense": "Apache License 2.0",
            "https://sevenbridges.compublisher": "KFDRC",
            "https://sevenbridges.comcategories": [
                "ALIGNMENT",
                "ANNOFUSE",
                "ARRIBA",
                "BAM",
                "CRAM",
                "CUTADAPT",
                "FASTQ",
                "KALLISTO",
                "PE",
                "RNASEQ",
                "RNASEQC",
                "RMATS",
                "RSEM",
                "SE",
                "STAR"
            ],
            "https://sevenbridges.comlinks": [
                {
                    "id": "#v5.0.1",
                    "label": "github-release"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#kfdrc_annoFuse_wf.cwl",
            "requirements": [
                {
                    "class": "MultipleInputFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "Tar ball with fusion_annot_lib.idx and blast_pairs.idx from STAR-Fusion CTAT Genome lib",
                    "id": "#kfdrc_annoFuse_wf.cwl/FusionGenome",
                    "https://sevenbridges.comsuggestedValue": {
                        "class": "File",
                        "path": "file:///home/ubuntu/volume/ICA/kf-rnaseq-workflow/workflow/63cff818facdd82011c8d6fe",
                        "name": "#kfdrc_annoFuse_wf.cwl/FusionGenome/GRCh38_v39_fusion_annot_custom.tar.gz"
                    }
                },
                {
                    "type": "File",
                    "doc": "Output from arriba, usually extension arriba.fusions.tsv",
                    "id": "#kfdrc_annoFuse_wf.cwl/arriba_output_file"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "0-based column number in file of fusion name, use 24 for arriba v1.1, 30 for v2",
                    "default": 30,
                    "id": "#kfdrc_annoFuse_wf.cwl/col_num"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "doc": "This is what the path will be when genome_tar is unpackaged",
                    "default": "GRCh38_v39_CTAT_lib_Mar242022.CUSTOM",
                    "id": "#kfdrc_annoFuse_wf.cwl/genome_untar_path"
                },
                {
                    "type": "string",
                    "doc": "String to use as basename for outputs",
                    "id": "#kfdrc_annoFuse_wf.cwl/output_basename"
                },
                {
                    "type": "File",
                    "doc": "gzipped rsem gene expression file",
                    "id": "#kfdrc_annoFuse_wf.cwl/rsem_expr_file"
                },
                {
                    "type": "string",
                    "doc": "Sample name to apply. Ought to be one from some kind of clinical database",
                    "id": "#kfdrc_annoFuse_wf.cwl/sample_name"
                },
                {
                    "type": "File",
                    "doc": "Output from STAR Fusion, usually extension STAR.fusion_predictions.abridged.coding_effect.tsv",
                    "id": "#kfdrc_annoFuse_wf.cwl/star_fusion_output_file"
                }
            ],
            "outputs": [
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputSource": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/filtered_fusions_tsv",
                    "doc": "Filtered output of formatted and annotated Star Fusion and arriba results",
                    "id": "#kfdrc_annoFuse_wf.cwl/annofuse_filtered_fusions_tsv"
                }
            ],
            "steps": [
                {
                    "run": "#annoFuse.cwl",
                    "in": [
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/annotate_arriba/annotated_tsv",
                            "id": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/arriba_formatted_fusions"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/output_basename",
                            "id": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/output_basename"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/rsem_expr_file",
                            "id": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/rsem_expr_file"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/sample_name",
                            "id": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/sample_name"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/star_fusion_output_file",
                            "id": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/starfusion_formatted_fusions"
                        }
                    ],
                    "out": [
                        "#kfdrc_annoFuse_wf.cwl/annoFuse_filter/filtered_fusions_tsv"
                    ],
                    "id": "#kfdrc_annoFuse_wf.cwl/annoFuse_filter"
                },
                {
                    "run": "#fusion_annotator.cwl",
                    "in": [
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/col_num",
                            "id": "#kfdrc_annoFuse_wf.cwl/annotate_arriba/col_num"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/FusionGenome",
                            "id": "#kfdrc_annoFuse_wf.cwl/annotate_arriba/genome_tar"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/genome_untar_path",
                            "id": "#kfdrc_annoFuse_wf.cwl/annotate_arriba/genome_untar_path"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/format_arriba_output/formatted_fusion_tsv",
                            "id": "#kfdrc_annoFuse_wf.cwl/annotate_arriba/input_fusion_file"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/output_basename",
                            "id": "#kfdrc_annoFuse_wf.cwl/annotate_arriba/output_basename"
                        }
                    ],
                    "out": [
                        "#kfdrc_annoFuse_wf.cwl/annotate_arriba/annotated_tsv"
                    ],
                    "id": "#kfdrc_annoFuse_wf.cwl/annotate_arriba"
                },
                {
                    "run": "#format_arriba_fusion_file.cwl",
                    "in": [
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/arriba_output_file",
                            "id": "#kfdrc_annoFuse_wf.cwl/format_arriba_output/arriba_fusion_file"
                        },
                        {
                            "source": "#kfdrc_annoFuse_wf.cwl/sample_name",
                            "id": "#kfdrc_annoFuse_wf.cwl/format_arriba_output/sample_name"
                        }
                    ],
                    "out": [
                        "#kfdrc_annoFuse_wf.cwl/format_arriba_output/formatted_fusion_tsv"
                    ],
                    "id": "#kfdrc_annoFuse_wf.cwl/format_arriba_output"
                }
            ],
            "hints": [
                {
                    "class": "LoadListingRequirement",
                    "loadListing": "deep_listing"
                },
                {
                    "class": "NetworkAccess",
                    "networkAccess": true
                },
                {
                    "class": "https://sevenbridges.comAWSInstanceType",
                    "value": "c5.2xlarge;ebs-gp2;400",
                    "doc": "Chosen for speed and lower cost"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#rmats_wf.cwl",
            "label": "rMATS Turbo",
            "doc": "# D3b rMATS Workflow\n\n## Introduction\n\nThe rMATS workflow can also be run as a standalone workflow. In this workflow, rMATS is run on the input BAM files to generate 5 junction files: `[alternative_3_prime_splice_sites_jc, alternative_5_prime_splice_sites_jc, mutually_exclusive_exons_jc, retained_introns_jc, skipped_exons_jc]`. The workflow next grabs the sample information from the `sample_1_bams` by parsing the read group information from the BAM header for use in the output names. Each of the five junction files then undergo a simple filtering process where calls that have junction counts less than 10 are removed. These filtered junction files are returned as the final outputs.\n\n## Usage\n\n### Inputs\n\n - `gtf_annotation`: Input gtf annotation file\n - `sample_1_bams:`: Input sample 1 bam files\n - `sample_2_bams:`: Input sample 2 bam files\n - `read_length:`: Input read length for sample reads\n - `variable_read_length`: Allow reads with lengths that differ from --readLength to be processed. --readLength will still be used to determine IncFormLen and SkipFormLen\n - `read_type`: Select one option for input read type either paired or single. Tool default: paired\n - `strandedness`: Select one option for input strandedness. Tool default: fr-unstranded\n - `novel_splice_sites:`: Select for novel splice site detection or unannotated splice sites. 'true' to detect or add this parameter, 'false' to disable denovo detection. Tool Default: false\n - `stat_off:`: Select to skip statistical analysis, either between two groups or on single sample group. 'true' to add this parameter. Tool default: false\n - `allow_clipping:`: Allow alignments with soft or hard clipping to be used\n - `output_basename:`: String to use as basename for output files\n - `rmats_threads:`: Threads to allocate to RMATs\n - `rmats_ram:`: GB of RAM to allocate to RMATs\n\n### Outputs\n\n - `filtered_alternative_3_prime_splice_sites_jc`: File extension `filtered.A3SS.MATS.JC.txt`. Alternative 3 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n - `filtered_alternative_5_prime_splice_sites_jc`: File extension `filtered.A5SS.MATS.JC.txt`. Alternative 5 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n - `filtered_mutually_exclusive_exons_jc`: File extension `filtered.MXE.MATS.JC.txt`. Mutually exclusive exons JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n - `filtered_retained_introns_jc`: File extension `filtered.RI.MATS.JC.txt`. Retained introns JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n - `filtered_skipped_exons_jc`: File extension `filtered.SE.MATS.JC.txt`. Skipped exons JC.txt output from RMATs containing only those calls with 10 or more junction spanning read counts of support\n",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Allow alignments with soft or hard clipping to be used.",
                    "id": "#rmats_wf.cwl/allow_clipping"
                },
                {
                    "type": "File",
                    "doc": "Input gtf annotation file.",
                    "id": "#rmats_wf.cwl/gtf_annotation"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Select for novel splice site detection or unannotated splice sites. 'true' to detect or add this parameter, 'false' to disable denovo detection. Tool Default: false",
                    "id": "#rmats_wf.cwl/novel_splice_sites"
                },
                {
                    "type": "string",
                    "doc": "String to use as basename for output files",
                    "id": "#rmats_wf.cwl/output_basename"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Input read length for sample reads.",
                    "id": "#rmats_wf.cwl/read_length"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#rmats_wf.cwl/read_type/read_type/paired",
                                "#rmats_wf.cwl/read_type/read_type/single"
                            ],
                            "name": "#rmats_wf.cwl/read_type/read_type"
                        }
                    ],
                    "doc": "Select one option for input read type either paired or single. Tool default: paired",
                    "id": "#rmats_wf.cwl/read_type"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "GB of RAM to allocate to RMATs.",
                    "id": "#rmats_wf.cwl/rmats_ram"
                },
                {
                    "type": [
                        "null",
                        "int"
                    ],
                    "doc": "Threads to allocate to RMATs.",
                    "id": "#rmats_wf.cwl/rmats_threads"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "doc": "Input sample 1 bam files.",
                    "id": "#rmats_wf.cwl/sample_1_bams"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "array",
                            "items": "File"
                        }
                    ],
                    "doc": "Input sample 2 bam files.",
                    "id": "#rmats_wf.cwl/sample_2_bams"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Select to skip statistical analysis, either between two groups or on single sample group. 'true' to add this parameter. Tool default: false",
                    "id": "#rmats_wf.cwl/stat_off"
                },
                {
                    "type": [
                        "null",
                        {
                            "type": "enum",
                            "symbols": [
                                "#rmats_wf.cwl/strandedness/strandedness/fr-unstranded",
                                "#rmats_wf.cwl/strandedness/strandedness/fr-firststrand",
                                "#rmats_wf.cwl/strandedness/strandedness/fr-secondstrand"
                            ],
                            "name": "#rmats_wf.cwl/strandedness/strandedness"
                        }
                    ],
                    "doc": "Select one option for input strandedness. Tool default: fr-unstranded",
                    "id": "#rmats_wf.cwl/strandedness"
                },
                {
                    "type": [
                        "null",
                        "boolean"
                    ],
                    "doc": "Allow reads with lengths that differ from --readLength to be processed. --readLength will still be used to determine IncFormLen and SkipFormLen.",
                    "id": "#rmats_wf.cwl/variable_read_length"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#rmats_wf.cwl/filter_alt_3_prime/output",
                    "doc": "Alternative 3 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more read counts of support",
                    "id": "#rmats_wf.cwl/filtered_alternative_3_prime_splice_sites_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#rmats_wf.cwl/filter_alt_5_prime/output",
                    "doc": "Alternative 5 prime splice sites JC.txt output from RMATs containing only those calls with 10 or more read counts of support",
                    "id": "#rmats_wf.cwl/filtered_alternative_5_prime_splice_sites_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#rmats_wf.cwl/filter_me_exons/output",
                    "doc": "Mutually exclusive exons JC.txt output from RMATs containing only those calls with 10 or more read counts of support",
                    "id": "#rmats_wf.cwl/filtered_mutually_exclusive_exons_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#rmats_wf.cwl/filter_retained_introns/output",
                    "doc": "Retained introns JC.txt output from RMATs containing only those calls with 10 or more read counts of support",
                    "id": "#rmats_wf.cwl/filtered_retained_introns_jc"
                },
                {
                    "type": "File",
                    "outputSource": "#rmats_wf.cwl/filter_skipped_exons/output",
                    "doc": "Skipped exons JC.txt output from RMATs containing only those calls with 10 or more read counts of support",
                    "id": "#rmats_wf.cwl/filtered_skipped_exons_jc"
                }
            ],
            "steps": [
                {
                    "run": "#awk_junction_filtering.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/rmats_both_bam/alternative_3_prime_splice_sites_jc",
                            "id": "#rmats_wf.cwl/filter_alt_3_prime/input_jc_file"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/filter_alt_3_prime/output"
                    ],
                    "id": "#rmats_wf.cwl/filter_alt_3_prime"
                },
                {
                    "run": "#awk_junction_filtering.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/rmats_both_bam/alternative_5_prime_splice_sites_jc",
                            "id": "#rmats_wf.cwl/filter_alt_5_prime/input_jc_file"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/filter_alt_5_prime/output"
                    ],
                    "id": "#rmats_wf.cwl/filter_alt_5_prime"
                },
                {
                    "run": "#awk_junction_filtering.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/rmats_both_bam/mutually_exclusive_exons_jc",
                            "id": "#rmats_wf.cwl/filter_me_exons/input_jc_file"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/filter_me_exons/output"
                    ],
                    "id": "#rmats_wf.cwl/filter_me_exons"
                },
                {
                    "run": "#awk_junction_filtering.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/rmats_both_bam/retained_introns_jc",
                            "id": "#rmats_wf.cwl/filter_retained_introns/input_jc_file"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/filter_retained_introns/output"
                    ],
                    "id": "#rmats_wf.cwl/filter_retained_introns"
                },
                {
                    "run": "#awk_junction_filtering.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/rmats_both_bam/skipped_exons_jc",
                            "id": "#rmats_wf.cwl/filter_skipped_exons/input_jc_file"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/filter_skipped_exons/output"
                    ],
                    "id": "#rmats_wf.cwl/filter_skipped_exons"
                },
                {
                    "run": "#rmats_both_bam.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/allow_clipping",
                            "id": "#rmats_wf.cwl/rmats_both_bam/allow_clipping"
                        },
                        {
                            "source": "#rmats_wf.cwl/gtf_annotation",
                            "id": "#rmats_wf.cwl/rmats_both_bam/gtf_annotation"
                        },
                        {
                            "source": "#rmats_wf.cwl/novel_splice_sites",
                            "id": "#rmats_wf.cwl/rmats_both_bam/novel_splice_sites"
                        },
                        {
                            "source": "#rmats_wf.cwl/output_basename",
                            "id": "#rmats_wf.cwl/rmats_both_bam/output_directory"
                        },
                        {
                            "source": "#rmats_wf.cwl/rmats_ram",
                            "id": "#rmats_wf.cwl/rmats_both_bam/ram"
                        },
                        {
                            "source": [
                                "#rmats_wf.cwl/read_length",
                                "#rmats_wf.cwl/samtools_readlength_bam/top_readlength"
                            ],
                            "pickValue": "first_non_null",
                            "id": "#rmats_wf.cwl/rmats_both_bam/read_length"
                        },
                        {
                            "source": "#rmats_wf.cwl/read_type",
                            "id": "#rmats_wf.cwl/rmats_both_bam/read_type"
                        },
                        {
                            "source": "#rmats_wf.cwl/sample_1_bams",
                            "id": "#rmats_wf.cwl/rmats_both_bam/sample_1"
                        },
                        {
                            "source": "#rmats_wf.cwl/sample_2_bams",
                            "id": "#rmats_wf.cwl/rmats_both_bam/sample_2"
                        },
                        {
                            "source": "#rmats_wf.cwl/stat_off",
                            "id": "#rmats_wf.cwl/rmats_both_bam/stat_off"
                        },
                        {
                            "source": "#rmats_wf.cwl/strandedness",
                            "id": "#rmats_wf.cwl/rmats_both_bam/strandedness"
                        },
                        {
                            "source": "#rmats_wf.cwl/rmats_threads",
                            "id": "#rmats_wf.cwl/rmats_both_bam/threads"
                        },
                        {
                            "source": [
                                "#rmats_wf.cwl/variable_read_length",
                                "#rmats_wf.cwl/samtools_readlength_bam/variable_readlength"
                            ],
                            "pickValue": "first_non_null",
                            "id": "#rmats_wf.cwl/rmats_both_bam/variable_read_length"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/rmats_both_bam/alternative_3_prime_splice_sites_jc",
                        "#rmats_wf.cwl/rmats_both_bam/alternative_5_prime_splice_sites_jc",
                        "#rmats_wf.cwl/rmats_both_bam/mutually_exclusive_exons_jc",
                        "#rmats_wf.cwl/rmats_both_bam/retained_introns_jc",
                        "#rmats_wf.cwl/rmats_both_bam/skipped_exons_jc",
                        "#rmats_wf.cwl/rmats_both_bam/temp_read_outcomes",
                        "#rmats_wf.cwl/rmats_both_bam/summary_file"
                    ],
                    "id": "#rmats_wf.cwl/rmats_both_bam"
                },
                {
                    "run": "#samtools_readlength_bam.cwl",
                    "in": [
                        {
                            "source": "#rmats_wf.cwl/sample_1_bams",
                            "valueFrom": "$(self[0])\n",
                            "id": "#rmats_wf.cwl/samtools_readlength_bam/input_bam"
                        }
                    ],
                    "out": [
                        "#rmats_wf.cwl/samtools_readlength_bam/output",
                        "#rmats_wf.cwl/samtools_readlength_bam/top_readlength",
                        "#rmats_wf.cwl/samtools_readlength_bam/variable_readlength"
                    ],
                    "id": "#rmats_wf.cwl/samtools_readlength_bam"
                }
            ],
            "https://sevenbridges.comlicense": "Apache License 2.0",
            "https://sevenbridges.compublisher": "KFDRC"
        }
    ],
    "cwlVersion": "v1.2"
}